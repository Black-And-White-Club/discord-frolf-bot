// Code generated by MockGen. DO NOT EDIT.
// Source: ./discord/gateway.go
//
// Generated by this command:
//
//	mockgen -source=./discord/gateway.go -destination=./mocks/mock_gateway.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGatewayEventHandler is a mock of GatewayEventHandler interface.
type MockGatewayEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayEventHandlerMockRecorder
	isgomock struct{}
}

// MockGatewayEventHandlerMockRecorder is the mock recorder for MockGatewayEventHandler.
type MockGatewayEventHandlerMockRecorder struct {
	mock *MockGatewayEventHandler
}

// NewMockGatewayEventHandler creates a new mock instance.
func NewMockGatewayEventHandler(ctrl *gomock.Controller) *MockGatewayEventHandler {
	mock := &MockGatewayEventHandler{ctrl: ctrl}
	mock.recorder = &MockGatewayEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayEventHandler) EXPECT() *MockGatewayEventHandlerMockRecorder {
	return m.recorder
}

// RegisterHandlers mocks base method.
func (m *MockGatewayEventHandler) RegisterHandlers() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterHandlers")
}

// RegisterHandlers indicates an expected call of RegisterHandlers.
func (mr *MockGatewayEventHandlerMockRecorder) RegisterHandlers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandlers", reflect.TypeOf((*MockGatewayEventHandler)(nil).RegisterHandlers))
}
