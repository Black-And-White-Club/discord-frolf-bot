// Code generated by MockGen. DO NOT EDIT.
// Source: ./discord/gateway.go
//
// Generated by this command:
//
//	mockgen -source=./discord/gateway.go -destination=./mocks/mock_gateway.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockGatewayEventHandler is a mock of GatewayEventHandler interface.
type MockGatewayEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayEventHandlerMockRecorder
	isgomock struct{}
}

// MockGatewayEventHandlerMockRecorder is the mock recorder for MockGatewayEventHandler.
type MockGatewayEventHandlerMockRecorder struct {
	mock *MockGatewayEventHandler
}

// NewMockGatewayEventHandler creates a new mock instance.
func NewMockGatewayEventHandler(ctrl *gomock.Controller) *MockGatewayEventHandler {
	mock := &MockGatewayEventHandler{ctrl: ctrl}
	mock.recorder = &MockGatewayEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayEventHandler) EXPECT() *MockGatewayEventHandlerMockRecorder {
	return m.recorder
}

// HandleCreateRoundCommand mocks base method.
func (m *MockGatewayEventHandler) HandleCreateRoundCommand(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCreateRoundCommand", ctx, i)
}

// HandleCreateRoundCommand indicates an expected call of HandleCreateRoundCommand.
func (mr *MockGatewayEventHandlerMockRecorder) HandleCreateRoundCommand(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateRoundCommand", reflect.TypeOf((*MockGatewayEventHandler)(nil).HandleCreateRoundCommand), ctx, i)
}

// HandleCreateRoundModalSubmit mocks base method.
func (m *MockGatewayEventHandler) HandleCreateRoundModalSubmit(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCreateRoundModalSubmit", ctx, i)
}

// HandleCreateRoundModalSubmit indicates an expected call of HandleCreateRoundModalSubmit.
func (mr *MockGatewayEventHandlerMockRecorder) HandleCreateRoundModalSubmit(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateRoundModalSubmit", reflect.TypeOf((*MockGatewayEventHandler)(nil).HandleCreateRoundModalSubmit), ctx, i)
}

// HandleRetryCreateRound mocks base method.
func (m *MockGatewayEventHandler) HandleRetryCreateRound(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRetryCreateRound", ctx, i)
}

// HandleRetryCreateRound indicates an expected call of HandleRetryCreateRound.
func (mr *MockGatewayEventHandlerMockRecorder) HandleRetryCreateRound(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRetryCreateRound", reflect.TypeOf((*MockGatewayEventHandler)(nil).HandleRetryCreateRound), ctx, i)
}

// HandleRoleButtonPress mocks base method.
func (m *MockGatewayEventHandler) HandleRoleButtonPress(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRoleButtonPress", ctx, i)
}

// HandleRoleButtonPress indicates an expected call of HandleRoleButtonPress.
func (mr *MockGatewayEventHandlerMockRecorder) HandleRoleButtonPress(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleButtonPress", reflect.TypeOf((*MockGatewayEventHandler)(nil).HandleRoleButtonPress), ctx, i)
}

// HandleRoleCancelButton mocks base method.
func (m *MockGatewayEventHandler) HandleRoleCancelButton(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRoleCancelButton", ctx, i)
}

// HandleRoleCancelButton indicates an expected call of HandleRoleCancelButton.
func (mr *MockGatewayEventHandlerMockRecorder) HandleRoleCancelButton(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleCancelButton", reflect.TypeOf((*MockGatewayEventHandler)(nil).HandleRoleCancelButton), ctx, i)
}

// HandleRoleRequestCommand mocks base method.
func (m *MockGatewayEventHandler) HandleRoleRequestCommand(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRoleRequestCommand", ctx, i)
}

// HandleRoleRequestCommand indicates an expected call of HandleRoleRequestCommand.
func (mr *MockGatewayEventHandlerMockRecorder) HandleRoleRequestCommand(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleRequestCommand", reflect.TypeOf((*MockGatewayEventHandler)(nil).HandleRoleRequestCommand), ctx, i)
}

// HandleRoundResponse mocks base method.
func (m *MockGatewayEventHandler) HandleRoundResponse(ctx context.Context, i *discordgo.InteractionCreate, response string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRoundResponse", ctx, i, response)
}

// HandleRoundResponse indicates an expected call of HandleRoundResponse.
func (mr *MockGatewayEventHandlerMockRecorder) HandleRoundResponse(ctx, i, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundResponse", reflect.TypeOf((*MockGatewayEventHandler)(nil).HandleRoundResponse), ctx, i, response)
}

// HandleSignupButtonPress mocks base method.
func (m *MockGatewayEventHandler) HandleSignupButtonPress(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleSignupButtonPress", ctx, i)
}

// HandleSignupButtonPress indicates an expected call of HandleSignupButtonPress.
func (mr *MockGatewayEventHandlerMockRecorder) HandleSignupButtonPress(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSignupButtonPress", reflect.TypeOf((*MockGatewayEventHandler)(nil).HandleSignupButtonPress), ctx, i)
}

// HandleSignupModalSubmit mocks base method.
func (m *MockGatewayEventHandler) HandleSignupModalSubmit(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleSignupModalSubmit", ctx, i)
}

// HandleSignupModalSubmit indicates an expected call of HandleSignupModalSubmit.
func (mr *MockGatewayEventHandlerMockRecorder) HandleSignupModalSubmit(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSignupModalSubmit", reflect.TypeOf((*MockGatewayEventHandler)(nil).HandleSignupModalSubmit), ctx, i)
}

// HandleSignupReactionAdd mocks base method.
func (m *MockGatewayEventHandler) HandleSignupReactionAdd(ctx context.Context, r *discordgo.MessageReactionAdd) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleSignupReactionAdd", ctx, r)
}

// HandleSignupReactionAdd indicates an expected call of HandleSignupReactionAdd.
func (mr *MockGatewayEventHandlerMockRecorder) HandleSignupReactionAdd(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSignupReactionAdd", reflect.TypeOf((*MockGatewayEventHandler)(nil).HandleSignupReactionAdd), ctx, r)
}

// InteractionCreate mocks base method.
func (m *MockGatewayEventHandler) InteractionCreate(s *discordgo.Session, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InteractionCreate", s, i)
}

// InteractionCreate indicates an expected call of InteractionCreate.
func (mr *MockGatewayEventHandlerMockRecorder) InteractionCreate(s, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionCreate", reflect.TypeOf((*MockGatewayEventHandler)(nil).InteractionCreate), s, i)
}

// MessageReactionAdd mocks base method.
func (m *MockGatewayEventHandler) MessageReactionAdd(s *discordgo.Session, r *discordgo.MessageReactionAdd) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MessageReactionAdd", s, r)
}

// MessageReactionAdd indicates an expected call of MessageReactionAdd.
func (mr *MockGatewayEventHandlerMockRecorder) MessageReactionAdd(s, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionAdd", reflect.TypeOf((*MockGatewayEventHandler)(nil).MessageReactionAdd), s, r)
}

// SendRoundEventEmbed mocks base method.
func (m *MockGatewayEventHandler) SendRoundEventEmbed(channelID, eventID, title, description string, startTime time.Time, location, creator string) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRoundEventEmbed", channelID, eventID, title, description, startTime, location, creator)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRoundEventEmbed indicates an expected call of SendRoundEventEmbed.
func (mr *MockGatewayEventHandlerMockRecorder) SendRoundEventEmbed(channelID, eventID, title, description, startTime, location, creator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRoundEventEmbed", reflect.TypeOf((*MockGatewayEventHandler)(nil).SendRoundEventEmbed), channelID, eventID, title, description, startTime, location, creator)
}

// UpdateInteractionResponse mocks base method.
func (m *MockGatewayEventHandler) UpdateInteractionResponse(ctx context.Context, correlationID, message string, edit ...*discordgo.WebhookEdit) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, correlationID, message}
	for _, a := range edit {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInteractionResponse", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInteractionResponse indicates an expected call of UpdateInteractionResponse.
func (mr *MockGatewayEventHandlerMockRecorder) UpdateInteractionResponse(ctx, correlationID, message any, edit ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, correlationID, message}, edit...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInteractionResponse", reflect.TypeOf((*MockGatewayEventHandler)(nil).UpdateInteractionResponse), varargs...)
}

// UpdateInteractionResponseWithRetryButton mocks base method.
func (m *MockGatewayEventHandler) UpdateInteractionResponseWithRetryButton(ctx context.Context, correlationID, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInteractionResponseWithRetryButton", ctx, correlationID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInteractionResponseWithRetryButton indicates an expected call of UpdateInteractionResponseWithRetryButton.
func (mr *MockGatewayEventHandlerMockRecorder) UpdateInteractionResponseWithRetryButton(ctx, correlationID, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInteractionResponseWithRetryButton", reflect.TypeOf((*MockGatewayEventHandler)(nil).UpdateInteractionResponseWithRetryButton), ctx, correlationID, message)
}
