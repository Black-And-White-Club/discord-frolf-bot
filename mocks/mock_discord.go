// Code generated by MockGen. DO NOT EDIT.
// Source: ./discord/discord.go
//
// Generated by this command:
//
//	mockgen -source=./discord/discord.go -destination=./mocks/mock_discord.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	discord "github.com/Black-And-White-Club/discord-frolf-bot/discord"
	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockDiscord is a mock of Discord interface.
type MockDiscord struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordMockRecorder
	isgomock struct{}
}

// MockDiscordMockRecorder is the mock recorder for MockDiscord.
type MockDiscordMockRecorder struct {
	mock *MockDiscord
}

// NewMockDiscord creates a new mock instance.
func NewMockDiscord(ctrl *gomock.Controller) *MockDiscord {
	mock := &MockDiscord{ctrl: ctrl}
	mock.recorder = &MockDiscordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscord) EXPECT() *MockDiscordMockRecorder {
	return m.recorder
}

// ChannelMessageSend mocks base method.
func (m *MockDiscord) ChannelMessageSend(channelID, content string, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, content}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSend", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSend indicates an expected call of ChannelMessageSend.
func (mr *MockDiscordMockRecorder) ChannelMessageSend(channelID, content any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, content}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSend", reflect.TypeOf((*MockDiscord)(nil).ChannelMessageSend), varargs...)
}

// ChannelMessages mocks base method.
func (m *MockDiscord) ChannelMessages(channelID string, limit int, beforeID, afterID, aroundID string) ([]*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessages", channelID, limit, beforeID, afterID, aroundID)
	ret0, _ := ret[0].([]*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessages indicates an expected call of ChannelMessages.
func (mr *MockDiscordMockRecorder) ChannelMessages(channelID, limit, beforeID, afterID, aroundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessages", reflect.TypeOf((*MockDiscord)(nil).ChannelMessages), channelID, limit, beforeID, afterID, aroundID)
}

// GetBotUser mocks base method.
func (m *MockDiscord) GetBotUser() (*discordgo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotUser")
	ret0, _ := ret[0].(*discordgo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBotUser indicates an expected call of GetBotUser.
func (mr *MockDiscordMockRecorder) GetBotUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotUser", reflect.TypeOf((*MockDiscord)(nil).GetBotUser))
}

// GetChannel mocks base method.
func (m *MockDiscord) GetChannel(channelID string) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", channelID)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockDiscordMockRecorder) GetChannel(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockDiscord)(nil).GetChannel), channelID)
}

// GetSession mocks base method.
func (m *MockDiscord) GetSession() *discordgo.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession")
	ret0, _ := ret[0].(*discordgo.Session)
	return ret0
}

// GetSession indicates an expected call of GetSession.
func (mr *MockDiscordMockRecorder) GetSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockDiscord)(nil).GetSession))
}

// GuildMemberRoleAdd mocks base method.
func (m *MockDiscord) GuildMemberRoleAdd(guildID, userID, roleID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, roleID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberRoleAdd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberRoleAdd indicates an expected call of GuildMemberRoleAdd.
func (mr *MockDiscordMockRecorder) GuildMemberRoleAdd(guildID, userID, roleID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, roleID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberRoleAdd", reflect.TypeOf((*MockDiscord)(nil).GuildMemberRoleAdd), varargs...)
}

// MessageReactionAdd mocks base method.
func (m *MockDiscord) MessageReactionAdd(channelID, messageID, emojiID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageReactionAdd", channelID, messageID, emojiID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageReactionAdd indicates an expected call of MessageReactionAdd.
func (mr *MockDiscordMockRecorder) MessageReactionAdd(channelID, messageID, emojiID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionAdd", reflect.TypeOf((*MockDiscord)(nil).MessageReactionAdd), channelID, messageID, emojiID)
}

// State mocks base method.
func (m *MockDiscord) State() discord.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(discord.State)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockDiscordMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockDiscord)(nil).State))
}

// UserChannelCreate mocks base method.
func (m *MockDiscord) UserChannelCreate(userID string) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserChannelCreate", userID)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChannelCreate indicates an expected call of UserChannelCreate.
func (mr *MockDiscordMockRecorder) UserChannelCreate(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChannelCreate", reflect.TypeOf((*MockDiscord)(nil).UserChannelCreate), userID)
}

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
	isgomock struct{}
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// Channel mocks base method.
func (m *MockState) Channel(channelID string) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel", channelID)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channel indicates an expected call of Channel.
func (mr *MockStateMockRecorder) Channel(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockState)(nil).Channel), channelID)
}

// Guild mocks base method.
func (m *MockState) Guild(guildID string) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Guild", guildID)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Guild indicates an expected call of Guild.
func (mr *MockStateMockRecorder) Guild(guildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Guild", reflect.TypeOf((*MockState)(nil).Guild), guildID)
}

// Member mocks base method.
func (m *MockState) Member(guildID, userID string) (*discordgo.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Member", guildID, userID)
	ret0, _ := ret[0].(*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Member indicates an expected call of Member.
func (mr *MockStateMockRecorder) Member(guildID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Member", reflect.TypeOf((*MockState)(nil).Member), guildID, userID)
}

// UserChannelPermissions mocks base method.
func (m *MockState) UserChannelPermissions(userID, channelID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserChannelPermissions", userID, channelID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChannelPermissions indicates an expected call of UserChannelPermissions.
func (mr *MockStateMockRecorder) UserChannelPermissions(userID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChannelPermissions", reflect.TypeOf((*MockState)(nil).UserChannelPermissions), userID, channelID)
}
