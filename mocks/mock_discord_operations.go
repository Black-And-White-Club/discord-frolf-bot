// Code generated by MockGen. DO NOT EDIT.
// Source: ./discord/operations.go
//
// Generated by this command:
//
//	mockgen -source=./discord/operations.go -destination=./mocks/mock_discord_operations.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockOperations is a mock of Operations interface.
type MockOperations struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsMockRecorder
	isgomock struct{}
}

// MockOperationsMockRecorder is the mock recorder for MockOperations.
type MockOperationsMockRecorder struct {
	mock *MockOperations
}

// NewMockOperations creates a new mock instance.
func NewMockOperations(ctrl *gomock.Controller) *MockOperations {
	mock := &MockOperations{ctrl: ctrl}
	mock.recorder = &MockOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperations) EXPECT() *MockOperationsMockRecorder {
	return m.recorder
}

// AddRoleToUser mocks base method.
func (m *MockOperations) AddRoleToUser(ctx context.Context, guildID, userID, roleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoleToUser", ctx, guildID, userID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoleToUser indicates an expected call of AddRoleToUser.
func (mr *MockOperationsMockRecorder) AddRoleToUser(ctx, guildID, userID, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleToUser", reflect.TypeOf((*MockOperations)(nil).AddRoleToUser), ctx, guildID, userID, roleID)
}

// EditRoleUpdateResponse mocks base method.
func (m *MockOperations) EditRoleUpdateResponse(ctx context.Context, interactionToken, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditRoleUpdateResponse", ctx, interactionToken, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditRoleUpdateResponse indicates an expected call of EditRoleUpdateResponse.
func (mr *MockOperationsMockRecorder) EditRoleUpdateResponse(ctx, interactionToken, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditRoleUpdateResponse", reflect.TypeOf((*MockOperations)(nil).EditRoleUpdateResponse), ctx, interactionToken, content)
}

// RespondToRoleButtonPress mocks base method.
func (m *MockOperations) RespondToRoleButtonPress(ctx context.Context, interactionID, interactionToken, requesterID, selectedRole, targetUserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToRoleButtonPress", ctx, interactionID, interactionToken, requesterID, selectedRole, targetUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespondToRoleButtonPress indicates an expected call of RespondToRoleButtonPress.
func (mr *MockOperationsMockRecorder) RespondToRoleButtonPress(ctx, interactionID, interactionToken, requesterID, selectedRole, targetUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToRoleButtonPress", reflect.TypeOf((*MockOperations)(nil).RespondToRoleButtonPress), ctx, interactionID, interactionToken, requesterID, selectedRole, targetUserID)
}

// RespondToRoleRequest mocks base method.
func (m *MockOperations) RespondToRoleRequest(ctx context.Context, interactionID, interactionToken, targetUserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToRoleRequest", ctx, interactionID, interactionToken, targetUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespondToRoleRequest indicates an expected call of RespondToRoleRequest.
func (mr *MockOperationsMockRecorder) RespondToRoleRequest(ctx, interactionID, interactionToken, targetUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToRoleRequest", reflect.TypeOf((*MockOperations)(nil).RespondToRoleRequest), ctx, interactionID, interactionToken, targetUserID)
}

// SendDM mocks base method.
func (m *MockOperations) SendDM(ctx context.Context, userID, message string) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDM", ctx, userID, message)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDM indicates an expected call of SendDM.
func (mr *MockOperationsMockRecorder) SendDM(ctx, userID, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDM", reflect.TypeOf((*MockOperations)(nil).SendDM), ctx, userID, message)
}

// SendEphemeralSignupModal mocks base method.
func (m *MockOperations) SendEphemeralSignupModal(ctx context.Context, userID, guildID string, i *discordgo.Interaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEphemeralSignupModal", ctx, userID, guildID, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEphemeralSignupModal indicates an expected call of SendEphemeralSignupModal.
func (mr *MockOperationsMockRecorder) SendEphemeralSignupModal(ctx, userID, guildID, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEphemeralSignupModal", reflect.TypeOf((*MockOperations)(nil).SendEphemeralSignupModal), ctx, userID, guildID, i)
}

// SendSignupModal mocks base method.
func (m *MockOperations) SendSignupModal(ctx context.Context, i *discordgo.Interaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSignupModal", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSignupModal indicates an expected call of SendSignupModal.
func (mr *MockOperationsMockRecorder) SendSignupModal(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSignupModal", reflect.TypeOf((*MockOperations)(nil).SendSignupModal), ctx, i)
}
