// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/score/watermill/handlers/handlers.go
//
// Generated by this command:
//
//	mockgen -source=./app/score/watermill/handlers/handlers.go -destination=./app/score/mocks/mock_handlers.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
	isgomock struct{}
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// HandleScoreUpdateFailure mocks base method.
func (m *MockHandler) HandleScoreUpdateFailure(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleScoreUpdateFailure", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleScoreUpdateFailure indicates an expected call of HandleScoreUpdateFailure.
func (mr *MockHandlerMockRecorder) HandleScoreUpdateFailure(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScoreUpdateFailure", reflect.TypeOf((*MockHandler)(nil).HandleScoreUpdateFailure), msg)
}

// HandleScoreUpdateRequest mocks base method.
func (m *MockHandler) HandleScoreUpdateRequest(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleScoreUpdateRequest", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleScoreUpdateRequest indicates an expected call of HandleScoreUpdateRequest.
func (mr *MockHandlerMockRecorder) HandleScoreUpdateRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScoreUpdateRequest", reflect.TypeOf((*MockHandler)(nil).HandleScoreUpdateRequest), msg)
}

// HandleScoreUpdateSuccess mocks base method.
func (m *MockHandler) HandleScoreUpdateSuccess(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleScoreUpdateSuccess", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleScoreUpdateSuccess indicates an expected call of HandleScoreUpdateSuccess.
func (mr *MockHandlerMockRecorder) HandleScoreUpdateSuccess(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScoreUpdateSuccess", reflect.TypeOf((*MockHandler)(nil).HandleScoreUpdateSuccess), msg)
}
