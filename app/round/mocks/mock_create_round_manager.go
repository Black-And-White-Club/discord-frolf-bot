// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/round/discord/create_round/create_round.go
//
// Generated by this command:
//
//	mockgen -source=./app/round/discord/create_round/create_round.go -destination=./app/round/mocks/mock_create_round_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	roundtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/round"
	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockCreateRoundManager is a mock of CreateRoundManager interface.
type MockCreateRoundManager struct {
	ctrl     *gomock.Controller
	recorder *MockCreateRoundManagerMockRecorder
	isgomock struct{}
}

// MockCreateRoundManagerMockRecorder is the mock recorder for MockCreateRoundManager.
type MockCreateRoundManagerMockRecorder struct {
	mock *MockCreateRoundManager
}

// NewMockCreateRoundManager creates a new mock instance.
func NewMockCreateRoundManager(ctrl *gomock.Controller) *MockCreateRoundManager {
	mock := &MockCreateRoundManager{ctrl: ctrl}
	mock.recorder = &MockCreateRoundManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateRoundManager) EXPECT() *MockCreateRoundManagerMockRecorder {
	return m.recorder
}

// HandleCreateRoundCommand mocks base method.
func (m *MockCreateRoundManager) HandleCreateRoundCommand(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCreateRoundCommand", ctx, i)
}

// HandleCreateRoundCommand indicates an expected call of HandleCreateRoundCommand.
func (mr *MockCreateRoundManagerMockRecorder) HandleCreateRoundCommand(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateRoundCommand", reflect.TypeOf((*MockCreateRoundManager)(nil).HandleCreateRoundCommand), ctx, i)
}

// HandleCreateRoundModalCancel mocks base method.
func (m *MockCreateRoundManager) HandleCreateRoundModalCancel(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCreateRoundModalCancel", ctx, i)
}

// HandleCreateRoundModalCancel indicates an expected call of HandleCreateRoundModalCancel.
func (mr *MockCreateRoundManagerMockRecorder) HandleCreateRoundModalCancel(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateRoundModalCancel", reflect.TypeOf((*MockCreateRoundManager)(nil).HandleCreateRoundModalCancel), ctx, i)
}

// HandleCreateRoundModalSubmit mocks base method.
func (m *MockCreateRoundManager) HandleCreateRoundModalSubmit(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCreateRoundModalSubmit", ctx, i)
}

// HandleCreateRoundModalSubmit indicates an expected call of HandleCreateRoundModalSubmit.
func (mr *MockCreateRoundManagerMockRecorder) HandleCreateRoundModalSubmit(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateRoundModalSubmit", reflect.TypeOf((*MockCreateRoundManager)(nil).HandleCreateRoundModalSubmit), ctx, i)
}

// HandleRetryCreateRound mocks base method.
func (m *MockCreateRoundManager) HandleRetryCreateRound(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRetryCreateRound", ctx, i)
}

// HandleRetryCreateRound indicates an expected call of HandleRetryCreateRound.
func (mr *MockCreateRoundManagerMockRecorder) HandleRetryCreateRound(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRetryCreateRound", reflect.TypeOf((*MockCreateRoundManager)(nil).HandleRetryCreateRound), ctx, i)
}

// SendCreateRoundModal mocks base method.
func (m *MockCreateRoundManager) SendCreateRoundModal(ctx context.Context, i *discordgo.InteractionCreate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCreateRoundModal", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCreateRoundModal indicates an expected call of SendCreateRoundModal.
func (mr *MockCreateRoundManagerMockRecorder) SendCreateRoundModal(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCreateRoundModal", reflect.TypeOf((*MockCreateRoundManager)(nil).SendCreateRoundModal), ctx, i)
}

// SendRoundEventEmbed mocks base method.
func (m *MockCreateRoundManager) SendRoundEventEmbed(channelID string, title roundtypes.Title, description roundtypes.Description, startTime roundtypes.StartTime, location roundtypes.Location, creatorID roundtypes.UserID, roundID roundtypes.ID) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRoundEventEmbed", channelID, title, description, startTime, location, creatorID, roundID)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRoundEventEmbed indicates an expected call of SendRoundEventEmbed.
func (mr *MockCreateRoundManagerMockRecorder) SendRoundEventEmbed(channelID, title, description, startTime, location, creatorID, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRoundEventEmbed", reflect.TypeOf((*MockCreateRoundManager)(nil).SendRoundEventEmbed), channelID, title, description, startTime, location, creatorID, roundID)
}

// UpdateInteractionResponse mocks base method.
func (m *MockCreateRoundManager) UpdateInteractionResponse(ctx context.Context, correlationID, message string, edit ...*discordgo.WebhookEdit) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, correlationID, message}
	for _, a := range edit {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInteractionResponse", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInteractionResponse indicates an expected call of UpdateInteractionResponse.
func (mr *MockCreateRoundManagerMockRecorder) UpdateInteractionResponse(ctx, correlationID, message any, edit ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, correlationID, message}, edit...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInteractionResponse", reflect.TypeOf((*MockCreateRoundManager)(nil).UpdateInteractionResponse), varargs...)
}

// UpdateInteractionResponseWithRetryButton mocks base method.
func (m *MockCreateRoundManager) UpdateInteractionResponseWithRetryButton(ctx context.Context, correlationID, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInteractionResponseWithRetryButton", ctx, correlationID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInteractionResponseWithRetryButton indicates an expected call of UpdateInteractionResponseWithRetryButton.
func (mr *MockCreateRoundManagerMockRecorder) UpdateInteractionResponseWithRetryButton(ctx, correlationID, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInteractionResponseWithRetryButton", reflect.TypeOf((*MockCreateRoundManager)(nil).UpdateInteractionResponseWithRetryButton), ctx, correlationID, message)
}
