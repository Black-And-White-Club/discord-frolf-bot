// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/round/discord/round_rsvp/round_rsvp.go
//
// Generated by this command:
//
//	mockgen -source=./app/round/discord/round_rsvp/round_rsvp.go -destination=./app/round/mocks/mock_round_rsvp_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	roundtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/round"
	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockRoundRsvpManager is a mock of RoundRsvpManager interface.
type MockRoundRsvpManager struct {
	ctrl     *gomock.Controller
	recorder *MockRoundRsvpManagerMockRecorder
	isgomock struct{}
}

// MockRoundRsvpManagerMockRecorder is the mock recorder for MockRoundRsvpManager.
type MockRoundRsvpManagerMockRecorder struct {
	mock *MockRoundRsvpManager
}

// NewMockRoundRsvpManager creates a new mock instance.
func NewMockRoundRsvpManager(ctrl *gomock.Controller) *MockRoundRsvpManager {
	mock := &MockRoundRsvpManager{ctrl: ctrl}
	mock.recorder = &MockRoundRsvpManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoundRsvpManager) EXPECT() *MockRoundRsvpManagerMockRecorder {
	return m.recorder
}

// HandleRoundResponse mocks base method.
func (m *MockRoundRsvpManager) HandleRoundResponse(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRoundResponse", ctx, i)
}

// HandleRoundResponse indicates an expected call of HandleRoundResponse.
func (mr *MockRoundRsvpManagerMockRecorder) HandleRoundResponse(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundResponse", reflect.TypeOf((*MockRoundRsvpManager)(nil).HandleRoundResponse), ctx, i)
}

// UpdateRoundEventEmbed mocks base method.
func (m *MockRoundRsvpManager) UpdateRoundEventEmbed(channelID, messageID string, acceptedParticipants, declinedParticipants, tentativeParticipants []roundtypes.Participant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoundEventEmbed", channelID, messageID, acceptedParticipants, declinedParticipants, tentativeParticipants)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoundEventEmbed indicates an expected call of UpdateRoundEventEmbed.
func (mr *MockRoundRsvpManagerMockRecorder) UpdateRoundEventEmbed(channelID, messageID, acceptedParticipants, declinedParticipants, tentativeParticipants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoundEventEmbed", reflect.TypeOf((*MockRoundRsvpManager)(nil).UpdateRoundEventEmbed), channelID, messageID, acceptedParticipants, declinedParticipants, tentativeParticipants)
}
