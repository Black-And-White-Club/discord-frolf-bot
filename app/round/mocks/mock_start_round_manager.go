// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/round/discord/start_round/start_round.go
//
// Generated by this command:
//
//	mockgen -source=./app/round/discord/start_round/start_round.go -destination=./app/round/mocks/mock_start_round_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	startround "github.com/Black-And-White-Club/discord-frolf-bot/app/round/discord/start_round"
	roundevents "github.com/Black-And-White-Club/frolf-bot-shared/events/round"
	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockStartRoundManager is a mock of StartRoundManager interface.
type MockStartRoundManager struct {
	ctrl     *gomock.Controller
	recorder *MockStartRoundManagerMockRecorder
	isgomock struct{}
}

// MockStartRoundManagerMockRecorder is the mock recorder for MockStartRoundManager.
type MockStartRoundManagerMockRecorder struct {
	mock *MockStartRoundManager
}

// NewMockStartRoundManager creates a new mock instance.
func NewMockStartRoundManager(ctrl *gomock.Controller) *MockStartRoundManager {
	mock := &MockStartRoundManager{ctrl: ctrl}
	mock.recorder = &MockStartRoundManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStartRoundManager) EXPECT() *MockStartRoundManagerMockRecorder {
	return m.recorder
}

// TransformRoundToScorecard mocks base method.
func (m *MockStartRoundManager) TransformRoundToScorecard(ctx context.Context, payload *roundevents.DiscordRoundStartPayload, existingEmbed *discordgo.MessageEmbed) (startround.StartRoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransformRoundToScorecard", ctx, payload, existingEmbed)
	ret0, _ := ret[0].(startround.StartRoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransformRoundToScorecard indicates an expected call of TransformRoundToScorecard.
func (mr *MockStartRoundManagerMockRecorder) TransformRoundToScorecard(ctx, payload, existingEmbed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformRoundToScorecard", reflect.TypeOf((*MockStartRoundManager)(nil).TransformRoundToScorecard), ctx, payload, existingEmbed)
}

// UpdateRoundToScorecard mocks base method.
func (m *MockStartRoundManager) UpdateRoundToScorecard(ctx context.Context, channelID, messageID string, payload *roundevents.DiscordRoundStartPayload) (startround.StartRoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoundToScorecard", ctx, channelID, messageID, payload)
	ret0, _ := ret[0].(startround.StartRoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoundToScorecard indicates an expected call of UpdateRoundToScorecard.
func (mr *MockStartRoundManagerMockRecorder) UpdateRoundToScorecard(ctx, channelID, messageID, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoundToScorecard", reflect.TypeOf((*MockStartRoundManager)(nil).UpdateRoundToScorecard), ctx, channelID, messageID, payload)
}
