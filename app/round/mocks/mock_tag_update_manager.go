// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/round/discord/tag_updates/tag_updates.go
//
// Generated by this command:
//
//	mockgen -source=./app/round/discord/tag_updates/tag_updates.go -destination=./app/round/mocks/mock_tag_update_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	tagupdates "github.com/Black-And-White-Club/discord-frolf-bot/app/round/discord/tag_updates"
	roundevents "github.com/Black-And-White-Club/frolf-bot-shared/events/round"
	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockTagUpdateManager is a mock of TagUpdateManager interface.
type MockTagUpdateManager struct {
	ctrl     *gomock.Controller
	recorder *MockTagUpdateManagerMockRecorder
	isgomock struct{}
}

// MockTagUpdateManagerMockRecorder is the mock recorder for MockTagUpdateManager.
type MockTagUpdateManagerMockRecorder struct {
	mock *MockTagUpdateManager
}

// NewMockTagUpdateManager creates a new mock instance.
func NewMockTagUpdateManager(ctrl *gomock.Controller) *MockTagUpdateManager {
	mock := &MockTagUpdateManager{ctrl: ctrl}
	mock.recorder = &MockTagUpdateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagUpdateManager) EXPECT() *MockTagUpdateManagerMockRecorder {
	return m.recorder
}

// UpdateDiscordEmbedsWithTagChanges mocks base method.
func (m *MockTagUpdateManager) UpdateDiscordEmbedsWithTagChanges(ctx context.Context, payload roundevents.TagsUpdatedForScheduledRoundsPayload, tagUpdates map[sharedtypes.DiscordID]*sharedtypes.TagNumber) (tagupdates.TagUpdateOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDiscordEmbedsWithTagChanges", ctx, payload, tagUpdates)
	ret0, _ := ret[0].(tagupdates.TagUpdateOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDiscordEmbedsWithTagChanges indicates an expected call of UpdateDiscordEmbedsWithTagChanges.
func (mr *MockTagUpdateManagerMockRecorder) UpdateDiscordEmbedsWithTagChanges(ctx, payload, tagUpdates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscordEmbedsWithTagChanges", reflect.TypeOf((*MockTagUpdateManager)(nil).UpdateDiscordEmbedsWithTagChanges), ctx, payload, tagUpdates)
}

// UpdateTagsInEmbed mocks base method.
func (m *MockTagUpdateManager) UpdateTagsInEmbed(ctx context.Context, channelID, messageID string, tagUpdates map[sharedtypes.DiscordID]*sharedtypes.TagNumber) (tagupdates.TagUpdateOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTagsInEmbed", ctx, channelID, messageID, tagUpdates)
	ret0, _ := ret[0].(tagupdates.TagUpdateOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTagsInEmbed indicates an expected call of UpdateTagsInEmbed.
func (mr *MockTagUpdateManagerMockRecorder) UpdateTagsInEmbed(ctx, channelID, messageID, tagUpdates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTagsInEmbed", reflect.TypeOf((*MockTagUpdateManager)(nil).UpdateTagsInEmbed), ctx, channelID, messageID, tagUpdates)
}
