// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/round/discord/score_round/score_round.go
//
// Generated by this command:
//
//	mockgen -source=./app/round/discord/score_round/score_round.go -destination=./app/round/mocks/mock_score_round_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	scoreround "github.com/Black-And-White-Club/discord-frolf-bot/app/round/discord/score_round"
	roundtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/round"
	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockScoreRoundManager is a mock of ScoreRoundManager interface.
type MockScoreRoundManager struct {
	ctrl     *gomock.Controller
	recorder *MockScoreRoundManagerMockRecorder
	isgomock struct{}
}

// MockScoreRoundManagerMockRecorder is the mock recorder for MockScoreRoundManager.
type MockScoreRoundManagerMockRecorder struct {
	mock *MockScoreRoundManager
}

// NewMockScoreRoundManager creates a new mock instance.
func NewMockScoreRoundManager(ctrl *gomock.Controller) *MockScoreRoundManager {
	mock := &MockScoreRoundManager{ctrl: ctrl}
	mock.recorder = &MockScoreRoundManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreRoundManager) EXPECT() *MockScoreRoundManagerMockRecorder {
	return m.recorder
}

// AddLateParticipantToScorecard mocks base method.
func (m *MockScoreRoundManager) AddLateParticipantToScorecard(ctx context.Context, channelID, messageID string, participants []roundtypes.Participant) (scoreround.ScoreRoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLateParticipantToScorecard", ctx, channelID, messageID, participants)
	ret0, _ := ret[0].(scoreround.ScoreRoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLateParticipantToScorecard indicates an expected call of AddLateParticipantToScorecard.
func (mr *MockScoreRoundManagerMockRecorder) AddLateParticipantToScorecard(ctx, channelID, messageID, participants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLateParticipantToScorecard", reflect.TypeOf((*MockScoreRoundManager)(nil).AddLateParticipantToScorecard), ctx, channelID, messageID, participants)
}

// HandleScoreButton mocks base method.
func (m *MockScoreRoundManager) HandleScoreButton(ctx context.Context, i *discordgo.InteractionCreate) (scoreround.ScoreRoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleScoreButton", ctx, i)
	ret0, _ := ret[0].(scoreround.ScoreRoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleScoreButton indicates an expected call of HandleScoreButton.
func (mr *MockScoreRoundManagerMockRecorder) HandleScoreButton(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScoreButton", reflect.TypeOf((*MockScoreRoundManager)(nil).HandleScoreButton), ctx, i)
}

// HandleScoreSubmission mocks base method.
func (m *MockScoreRoundManager) HandleScoreSubmission(ctx context.Context, i *discordgo.InteractionCreate) (scoreround.ScoreRoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleScoreSubmission", ctx, i)
	ret0, _ := ret[0].(scoreround.ScoreRoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleScoreSubmission indicates an expected call of HandleScoreSubmission.
func (mr *MockScoreRoundManagerMockRecorder) HandleScoreSubmission(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScoreSubmission", reflect.TypeOf((*MockScoreRoundManager)(nil).HandleScoreSubmission), ctx, i)
}

// SendScoreUpdateConfirmation mocks base method.
func (m *MockScoreRoundManager) SendScoreUpdateConfirmation(ctx context.Context, channelID string, userID sharedtypes.DiscordID, score *sharedtypes.Score) (scoreround.ScoreRoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendScoreUpdateConfirmation", ctx, channelID, userID, score)
	ret0, _ := ret[0].(scoreround.ScoreRoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendScoreUpdateConfirmation indicates an expected call of SendScoreUpdateConfirmation.
func (mr *MockScoreRoundManagerMockRecorder) SendScoreUpdateConfirmation(ctx, channelID, userID, score any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendScoreUpdateConfirmation", reflect.TypeOf((*MockScoreRoundManager)(nil).SendScoreUpdateConfirmation), ctx, channelID, userID, score)
}

// SendScoreUpdateError mocks base method.
func (m *MockScoreRoundManager) SendScoreUpdateError(ctx context.Context, userID sharedtypes.DiscordID, errorMsg string) (scoreround.ScoreRoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendScoreUpdateError", ctx, userID, errorMsg)
	ret0, _ := ret[0].(scoreround.ScoreRoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendScoreUpdateError indicates an expected call of SendScoreUpdateError.
func (mr *MockScoreRoundManagerMockRecorder) SendScoreUpdateError(ctx, userID, errorMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendScoreUpdateError", reflect.TypeOf((*MockScoreRoundManager)(nil).SendScoreUpdateError), ctx, userID, errorMsg)
}

// UpdateScoreEmbed mocks base method.
func (m *MockScoreRoundManager) UpdateScoreEmbed(ctx context.Context, channelID, messageID string, userID sharedtypes.DiscordID, score *sharedtypes.Score) (scoreround.ScoreRoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScoreEmbed", ctx, channelID, messageID, userID, score)
	ret0, _ := ret[0].(scoreround.ScoreRoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScoreEmbed indicates an expected call of UpdateScoreEmbed.
func (mr *MockScoreRoundManagerMockRecorder) UpdateScoreEmbed(ctx, channelID, messageID, userID, score any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScoreEmbed", reflect.TypeOf((*MockScoreRoundManager)(nil).UpdateScoreEmbed), ctx, channelID, messageID, userID, score)
}
