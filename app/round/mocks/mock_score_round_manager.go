// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/round/discord/score_round/score_round.go
//
// Generated by this command:
//
//	mockgen -source=./app/round/discord/score_round/score_round.go -destination=./app/round/mocks/mock_score_round_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	roundtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/round"
	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockScoreRoundManager is a mock of ScoreRoundManager interface.
type MockScoreRoundManager struct {
	ctrl     *gomock.Controller
	recorder *MockScoreRoundManagerMockRecorder
	isgomock struct{}
}

// MockScoreRoundManagerMockRecorder is the mock recorder for MockScoreRoundManager.
type MockScoreRoundManagerMockRecorder struct {
	mock *MockScoreRoundManager
}

// NewMockScoreRoundManager creates a new mock instance.
func NewMockScoreRoundManager(ctrl *gomock.Controller) *MockScoreRoundManager {
	mock := &MockScoreRoundManager{ctrl: ctrl}
	mock.recorder = &MockScoreRoundManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreRoundManager) EXPECT() *MockScoreRoundManagerMockRecorder {
	return m.recorder
}

// HandleScoreButton mocks base method.
func (m *MockScoreRoundManager) HandleScoreButton(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleScoreButton", ctx, i)
}

// HandleScoreButton indicates an expected call of HandleScoreButton.
func (mr *MockScoreRoundManagerMockRecorder) HandleScoreButton(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScoreButton", reflect.TypeOf((*MockScoreRoundManager)(nil).HandleScoreButton), ctx, i)
}

// HandleScoreSubmission mocks base method.
func (m *MockScoreRoundManager) HandleScoreSubmission(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleScoreSubmission", ctx, i)
}

// HandleScoreSubmission indicates an expected call of HandleScoreSubmission.
func (mr *MockScoreRoundManagerMockRecorder) HandleScoreSubmission(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScoreSubmission", reflect.TypeOf((*MockScoreRoundManager)(nil).HandleScoreSubmission), ctx, i)
}

// SendScoreUpdateConfirmation mocks base method.
func (m *MockScoreRoundManager) SendScoreUpdateConfirmation(channelID string, userID roundtypes.UserID, score *int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendScoreUpdateConfirmation", channelID, userID, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendScoreUpdateConfirmation indicates an expected call of SendScoreUpdateConfirmation.
func (mr *MockScoreRoundManagerMockRecorder) SendScoreUpdateConfirmation(channelID, userID, score any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendScoreUpdateConfirmation", reflect.TypeOf((*MockScoreRoundManager)(nil).SendScoreUpdateConfirmation), channelID, userID, score)
}

// SendScoreUpdateError mocks base method.
func (m *MockScoreRoundManager) SendScoreUpdateError(userID roundtypes.UserID, errorMsg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendScoreUpdateError", userID, errorMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendScoreUpdateError indicates an expected call of SendScoreUpdateError.
func (mr *MockScoreRoundManagerMockRecorder) SendScoreUpdateError(userID, errorMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendScoreUpdateError", reflect.TypeOf((*MockScoreRoundManager)(nil).SendScoreUpdateError), userID, errorMsg)
}
