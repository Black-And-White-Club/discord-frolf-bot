// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/round/discord/update_round/update_round.go
//
// Generated by this command:
//
//	mockgen -source=./app/round/discord/update_round/update_round.go -destination=./app/round/mocks/mock_update_round_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	updateround "github.com/Black-And-White-Club/discord-frolf-bot/app/round/discord/update_round"
	roundtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/round"
	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdateRoundManager is a mock of UpdateRoundManager interface.
type MockUpdateRoundManager struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateRoundManagerMockRecorder
	isgomock struct{}
}

// MockUpdateRoundManagerMockRecorder is the mock recorder for MockUpdateRoundManager.
type MockUpdateRoundManagerMockRecorder struct {
	mock *MockUpdateRoundManager
}

// NewMockUpdateRoundManager creates a new mock instance.
func NewMockUpdateRoundManager(ctrl *gomock.Controller) *MockUpdateRoundManager {
	mock := &MockUpdateRoundManager{ctrl: ctrl}
	mock.recorder = &MockUpdateRoundManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateRoundManager) EXPECT() *MockUpdateRoundManagerMockRecorder {
	return m.recorder
}

// HandleEditRoundButton mocks base method.
func (m *MockUpdateRoundManager) HandleEditRoundButton(ctx context.Context, i *discordgo.InteractionCreate) (updateround.UpdateRoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEditRoundButton", ctx, i)
	ret0, _ := ret[0].(updateround.UpdateRoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleEditRoundButton indicates an expected call of HandleEditRoundButton.
func (mr *MockUpdateRoundManagerMockRecorder) HandleEditRoundButton(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEditRoundButton", reflect.TypeOf((*MockUpdateRoundManager)(nil).HandleEditRoundButton), ctx, i)
}

// HandleUpdateRoundModalCancel mocks base method.
func (m *MockUpdateRoundManager) HandleUpdateRoundModalCancel(ctx context.Context, i *discordgo.InteractionCreate) (updateround.UpdateRoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUpdateRoundModalCancel", ctx, i)
	ret0, _ := ret[0].(updateround.UpdateRoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleUpdateRoundModalCancel indicates an expected call of HandleUpdateRoundModalCancel.
func (mr *MockUpdateRoundManagerMockRecorder) HandleUpdateRoundModalCancel(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUpdateRoundModalCancel", reflect.TypeOf((*MockUpdateRoundManager)(nil).HandleUpdateRoundModalCancel), ctx, i)
}

// HandleUpdateRoundModalSubmit mocks base method.
func (m *MockUpdateRoundManager) HandleUpdateRoundModalSubmit(ctx context.Context, i *discordgo.InteractionCreate) (updateround.UpdateRoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUpdateRoundModalSubmit", ctx, i)
	ret0, _ := ret[0].(updateround.UpdateRoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleUpdateRoundModalSubmit indicates an expected call of HandleUpdateRoundModalSubmit.
func (mr *MockUpdateRoundManagerMockRecorder) HandleUpdateRoundModalSubmit(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUpdateRoundModalSubmit", reflect.TypeOf((*MockUpdateRoundManager)(nil).HandleUpdateRoundModalSubmit), ctx, i)
}

// SendUpdateRoundModal mocks base method.
func (m *MockUpdateRoundManager) SendUpdateRoundModal(ctx context.Context, i *discordgo.InteractionCreate, roundID sharedtypes.RoundID) (updateround.UpdateRoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUpdateRoundModal", ctx, i, roundID)
	ret0, _ := ret[0].(updateround.UpdateRoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendUpdateRoundModal indicates an expected call of SendUpdateRoundModal.
func (mr *MockUpdateRoundManagerMockRecorder) SendUpdateRoundModal(ctx, i, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUpdateRoundModal", reflect.TypeOf((*MockUpdateRoundManager)(nil).SendUpdateRoundModal), ctx, i, roundID)
}

// UpdateRoundEventEmbed mocks base method.
func (m *MockUpdateRoundManager) UpdateRoundEventEmbed(ctx context.Context, channelID, messageID string, title *roundtypes.Title, description *roundtypes.Description, startTime *sharedtypes.StartTime, location *roundtypes.Location) (updateround.UpdateRoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoundEventEmbed", ctx, channelID, messageID, title, description, startTime, location)
	ret0, _ := ret[0].(updateround.UpdateRoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoundEventEmbed indicates an expected call of UpdateRoundEventEmbed.
func (mr *MockUpdateRoundManagerMockRecorder) UpdateRoundEventEmbed(ctx, channelID, messageID, title, description, startTime, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoundEventEmbed", reflect.TypeOf((*MockUpdateRoundManager)(nil).UpdateRoundEventEmbed), ctx, channelID, messageID, title, description, startTime, location)
}
