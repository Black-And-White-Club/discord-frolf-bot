// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/round/discord/delete_round/delete_round.go
//
// Generated by this command:
//
//	mockgen -source=./app/round/discord/delete_round/delete_round.go -destination=./app/round/mocks/mock_delete_round_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	roundtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/round"
	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockDeleteRoundManager is a mock of DeleteRoundManager interface.
type MockDeleteRoundManager struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteRoundManagerMockRecorder
	isgomock struct{}
}

// MockDeleteRoundManagerMockRecorder is the mock recorder for MockDeleteRoundManager.
type MockDeleteRoundManagerMockRecorder struct {
	mock *MockDeleteRoundManager
}

// NewMockDeleteRoundManager creates a new mock instance.
func NewMockDeleteRoundManager(ctrl *gomock.Controller) *MockDeleteRoundManager {
	mock := &MockDeleteRoundManager{ctrl: ctrl}
	mock.recorder = &MockDeleteRoundManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteRoundManager) EXPECT() *MockDeleteRoundManagerMockRecorder {
	return m.recorder
}

// DeleteEmbed mocks base method.
func (m *MockDeleteRoundManager) DeleteEmbed(ctx context.Context, eventMessageID roundtypes.EventMessageID, channelID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmbed", ctx, eventMessageID, channelID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmbed indicates an expected call of DeleteEmbed.
func (mr *MockDeleteRoundManagerMockRecorder) DeleteEmbed(ctx, eventMessageID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmbed", reflect.TypeOf((*MockDeleteRoundManager)(nil).DeleteEmbed), ctx, eventMessageID, channelID)
}

// HandleDeleteRound mocks base method.
func (m *MockDeleteRoundManager) HandleDeleteRound(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleDeleteRound", ctx, i)
}

// HandleDeleteRound indicates an expected call of HandleDeleteRound.
func (mr *MockDeleteRoundManagerMockRecorder) HandleDeleteRound(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeleteRound", reflect.TypeOf((*MockDeleteRoundManager)(nil).HandleDeleteRound), ctx, i)
}
