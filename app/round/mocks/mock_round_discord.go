// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/round/discord/discord.go
//
// Generated by this command:
//
//	mockgen -source=./app/round/discord/discord.go -destination=./app/round/mocks/mock_round_discord.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	createround "github.com/Black-And-White-Club/discord-frolf-bot/app/round/discord/create_round"
	deleteround "github.com/Black-And-White-Club/discord-frolf-bot/app/round/discord/delete_round"
	finalizeround "github.com/Black-And-White-Club/discord-frolf-bot/app/round/discord/finalize_round"
	roundreminder "github.com/Black-And-White-Club/discord-frolf-bot/app/round/discord/round_reminder"
	roundrsvp "github.com/Black-And-White-Club/discord-frolf-bot/app/round/discord/round_rsvp"
	scoreround "github.com/Black-And-White-Club/discord-frolf-bot/app/round/discord/score_round"
	startround "github.com/Black-And-White-Club/discord-frolf-bot/app/round/discord/start_round"
	updateround "github.com/Black-And-White-Club/discord-frolf-bot/app/round/discord/update_round"
	gomock "go.uber.org/mock/gomock"
)

// MockRoundDiscordInterface is a mock of RoundDiscordInterface interface.
type MockRoundDiscordInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoundDiscordInterfaceMockRecorder
	isgomock struct{}
}

// MockRoundDiscordInterfaceMockRecorder is the mock recorder for MockRoundDiscordInterface.
type MockRoundDiscordInterfaceMockRecorder struct {
	mock *MockRoundDiscordInterface
}

// NewMockRoundDiscordInterface creates a new mock instance.
func NewMockRoundDiscordInterface(ctrl *gomock.Controller) *MockRoundDiscordInterface {
	mock := &MockRoundDiscordInterface{ctrl: ctrl}
	mock.recorder = &MockRoundDiscordInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoundDiscordInterface) EXPECT() *MockRoundDiscordInterfaceMockRecorder {
	return m.recorder
}

// GetCreateRoundManager mocks base method.
func (m *MockRoundDiscordInterface) GetCreateRoundManager() createround.CreateRoundManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateRoundManager")
	ret0, _ := ret[0].(createround.CreateRoundManager)
	return ret0
}

// GetCreateRoundManager indicates an expected call of GetCreateRoundManager.
func (mr *MockRoundDiscordInterfaceMockRecorder) GetCreateRoundManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateRoundManager", reflect.TypeOf((*MockRoundDiscordInterface)(nil).GetCreateRoundManager))
}

// GetDeleteRoundManager mocks base method.
func (m *MockRoundDiscordInterface) GetDeleteRoundManager() deleteround.DeleteRoundManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeleteRoundManager")
	ret0, _ := ret[0].(deleteround.DeleteRoundManager)
	return ret0
}

// GetDeleteRoundManager indicates an expected call of GetDeleteRoundManager.
func (mr *MockRoundDiscordInterfaceMockRecorder) GetDeleteRoundManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeleteRoundManager", reflect.TypeOf((*MockRoundDiscordInterface)(nil).GetDeleteRoundManager))
}

// GetFinalizeRoundManager mocks base method.
func (m *MockRoundDiscordInterface) GetFinalizeRoundManager() finalizeround.FinalizeRoundManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalizeRoundManager")
	ret0, _ := ret[0].(finalizeround.FinalizeRoundManager)
	return ret0
}

// GetFinalizeRoundManager indicates an expected call of GetFinalizeRoundManager.
func (mr *MockRoundDiscordInterfaceMockRecorder) GetFinalizeRoundManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalizeRoundManager", reflect.TypeOf((*MockRoundDiscordInterface)(nil).GetFinalizeRoundManager))
}

// GetRoundReminderManager mocks base method.
func (m *MockRoundDiscordInterface) GetRoundReminderManager() roundreminder.RoundReminderManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoundReminderManager")
	ret0, _ := ret[0].(roundreminder.RoundReminderManager)
	return ret0
}

// GetRoundReminderManager indicates an expected call of GetRoundReminderManager.
func (mr *MockRoundDiscordInterfaceMockRecorder) GetRoundReminderManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoundReminderManager", reflect.TypeOf((*MockRoundDiscordInterface)(nil).GetRoundReminderManager))
}

// GetRoundRsvpManager mocks base method.
func (m *MockRoundDiscordInterface) GetRoundRsvpManager() roundrsvp.RoundRsvpManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoundRsvpManager")
	ret0, _ := ret[0].(roundrsvp.RoundRsvpManager)
	return ret0
}

// GetRoundRsvpManager indicates an expected call of GetRoundRsvpManager.
func (mr *MockRoundDiscordInterfaceMockRecorder) GetRoundRsvpManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoundRsvpManager", reflect.TypeOf((*MockRoundDiscordInterface)(nil).GetRoundRsvpManager))
}

// GetScoreRoundManager mocks base method.
func (m *MockRoundDiscordInterface) GetScoreRoundManager() scoreround.ScoreRoundManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScoreRoundManager")
	ret0, _ := ret[0].(scoreround.ScoreRoundManager)
	return ret0
}

// GetScoreRoundManager indicates an expected call of GetScoreRoundManager.
func (mr *MockRoundDiscordInterfaceMockRecorder) GetScoreRoundManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScoreRoundManager", reflect.TypeOf((*MockRoundDiscordInterface)(nil).GetScoreRoundManager))
}

// GetStartRoundManager mocks base method.
func (m *MockRoundDiscordInterface) GetStartRoundManager() startround.StartRoundManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartRoundManager")
	ret0, _ := ret[0].(startround.StartRoundManager)
	return ret0
}

// GetStartRoundManager indicates an expected call of GetStartRoundManager.
func (mr *MockRoundDiscordInterfaceMockRecorder) GetStartRoundManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartRoundManager", reflect.TypeOf((*MockRoundDiscordInterface)(nil).GetStartRoundManager))
}

// GetUpdateRoundManager mocks base method.
func (m *MockRoundDiscordInterface) GetUpdateRoundManager() updateround.UpdateRoundManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateRoundManager")
	ret0, _ := ret[0].(updateround.UpdateRoundManager)
	return ret0
}

// GetUpdateRoundManager indicates an expected call of GetUpdateRoundManager.
func (mr *MockRoundDiscordInterfaceMockRecorder) GetUpdateRoundManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateRoundManager", reflect.TypeOf((*MockRoundDiscordInterface)(nil).GetUpdateRoundManager))
}
