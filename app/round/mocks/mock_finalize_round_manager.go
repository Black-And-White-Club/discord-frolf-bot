// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/round/discord/finalize_round/finalize_round.go
//
// Generated by this command:
//
//	mockgen -source=./app/round/discord/finalize_round/finalize_round.go -destination=./app/round/mocks/mock_finalize_round_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	finalizeround "github.com/Black-And-White-Club/discord-frolf-bot/app/round/discord/finalize_round"
	roundevents "github.com/Black-And-White-Club/frolf-bot-shared/events/round"
	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockFinalizeRoundManager is a mock of FinalizeRoundManager interface.
type MockFinalizeRoundManager struct {
	ctrl     *gomock.Controller
	recorder *MockFinalizeRoundManagerMockRecorder
	isgomock struct{}
}

// MockFinalizeRoundManagerMockRecorder is the mock recorder for MockFinalizeRoundManager.
type MockFinalizeRoundManagerMockRecorder struct {
	mock *MockFinalizeRoundManager
}

// NewMockFinalizeRoundManager creates a new mock instance.
func NewMockFinalizeRoundManager(ctrl *gomock.Controller) *MockFinalizeRoundManager {
	mock := &MockFinalizeRoundManager{ctrl: ctrl}
	mock.recorder = &MockFinalizeRoundManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinalizeRoundManager) EXPECT() *MockFinalizeRoundManagerMockRecorder {
	return m.recorder
}

// FinalizeScorecardEmbed mocks base method.
func (m *MockFinalizeRoundManager) FinalizeScorecardEmbed(ctx context.Context, eventMessageID, channelID string, embedPayload roundevents.RoundFinalizedEmbedUpdatePayload) (finalizeround.FinalizeRoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeScorecardEmbed", ctx, eventMessageID, channelID, embedPayload)
	ret0, _ := ret[0].(finalizeround.FinalizeRoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeScorecardEmbed indicates an expected call of FinalizeScorecardEmbed.
func (mr *MockFinalizeRoundManagerMockRecorder) FinalizeScorecardEmbed(ctx, eventMessageID, channelID, embedPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeScorecardEmbed", reflect.TypeOf((*MockFinalizeRoundManager)(nil).FinalizeScorecardEmbed), ctx, eventMessageID, channelID, embedPayload)
}

// TransformRoundToFinalizedScorecard mocks base method.
func (m *MockFinalizeRoundManager) TransformRoundToFinalizedScorecard(payload roundevents.RoundFinalizedEmbedUpdatePayload) (*discordgo.MessageEmbed, []discordgo.MessageComponent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransformRoundToFinalizedScorecard", payload)
	ret0, _ := ret[0].(*discordgo.MessageEmbed)
	ret1, _ := ret[1].([]discordgo.MessageComponent)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TransformRoundToFinalizedScorecard indicates an expected call of TransformRoundToFinalizedScorecard.
func (mr *MockFinalizeRoundManagerMockRecorder) TransformRoundToFinalizedScorecard(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformRoundToFinalizedScorecard", reflect.TypeOf((*MockFinalizeRoundManager)(nil).TransformRoundToFinalizedScorecard), payload)
}
