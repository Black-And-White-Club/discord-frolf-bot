// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/round/discord/round_reminder/round_reminder.go
//
// Generated by this command:
//
//	mockgen -source=./app/round/discord/round_reminder/round_reminder.go -destination=./app/round/mocks/mock_round_reminder_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	roundevents "github.com/Black-And-White-Club/frolf-bot-shared/events/round"
	gomock "go.uber.org/mock/gomock"
)

// MockRoundReminderManager is a mock of RoundReminderManager interface.
type MockRoundReminderManager struct {
	ctrl     *gomock.Controller
	recorder *MockRoundReminderManagerMockRecorder
	isgomock struct{}
}

// MockRoundReminderManagerMockRecorder is the mock recorder for MockRoundReminderManager.
type MockRoundReminderManagerMockRecorder struct {
	mock *MockRoundReminderManager
}

// NewMockRoundReminderManager creates a new mock instance.
func NewMockRoundReminderManager(ctrl *gomock.Controller) *MockRoundReminderManager {
	mock := &MockRoundReminderManager{ctrl: ctrl}
	mock.recorder = &MockRoundReminderManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoundReminderManager) EXPECT() *MockRoundReminderManagerMockRecorder {
	return m.recorder
}

// SendRoundReminder mocks base method.
func (m *MockRoundReminderManager) SendRoundReminder(ctx context.Context, payload *roundevents.DiscordReminderPayload) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRoundReminder", ctx, payload)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRoundReminder indicates an expected call of SendRoundReminder.
func (mr *MockRoundReminderManagerMockRecorder) SendRoundReminder(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRoundReminder", reflect.TypeOf((*MockRoundReminderManager)(nil).SendRoundReminder), ctx, payload)
}
