// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/guildconfig/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/guildconfig/interface.go -destination=./app/guildconfig/mocks/mock_guildconfig_resolver.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/Black-And-White-Club/discord-frolf-bot/app/shared/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockGuildConfigResolver is a mock of GuildConfigResolver interface.
type MockGuildConfigResolver struct {
	ctrl     *gomock.Controller
	recorder *MockGuildConfigResolverMockRecorder
	isgomock struct{}
}

// MockGuildConfigResolverMockRecorder is the mock recorder for MockGuildConfigResolver.
type MockGuildConfigResolverMockRecorder struct {
	mock *MockGuildConfigResolver
}

// NewMockGuildConfigResolver creates a new mock instance.
func NewMockGuildConfigResolver(ctrl *gomock.Controller) *MockGuildConfigResolver {
	mock := &MockGuildConfigResolver{ctrl: ctrl}
	mock.recorder = &MockGuildConfigResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuildConfigResolver) EXPECT() *MockGuildConfigResolverMockRecorder {
	return m.recorder
}

// GetGuildConfigWithContext mocks base method.
func (m *MockGuildConfigResolver) GetGuildConfigWithContext(ctx context.Context, guildID string) (*storage.GuildConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuildConfigWithContext", ctx, guildID)
	ret0, _ := ret[0].(*storage.GuildConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuildConfigWithContext indicates an expected call of GetGuildConfigWithContext.
func (mr *MockGuildConfigResolverMockRecorder) GetGuildConfigWithContext(ctx, guildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuildConfigWithContext", reflect.TypeOf((*MockGuildConfigResolver)(nil).GetGuildConfigWithContext), ctx, guildID)
}

// HandleGuildConfigReceived mocks base method.
func (m *MockGuildConfigResolver) HandleGuildConfigReceived(ctx context.Context, guildID string, config *storage.GuildConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleGuildConfigReceived", ctx, guildID, config)
}

// HandleGuildConfigReceived indicates an expected call of HandleGuildConfigReceived.
func (mr *MockGuildConfigResolverMockRecorder) HandleGuildConfigReceived(ctx, guildID, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGuildConfigReceived", reflect.TypeOf((*MockGuildConfigResolver)(nil).HandleGuildConfigReceived), ctx, guildID, config)
}

// IsGuildSetupComplete mocks base method.
func (m *MockGuildConfigResolver) IsGuildSetupComplete(guildID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGuildSetupComplete", guildID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsGuildSetupComplete indicates an expected call of IsGuildSetupComplete.
func (mr *MockGuildConfigResolverMockRecorder) IsGuildSetupComplete(guildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGuildSetupComplete", reflect.TypeOf((*MockGuildConfigResolver)(nil).IsGuildSetupComplete), guildID)
}
