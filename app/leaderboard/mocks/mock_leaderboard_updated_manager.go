// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/leaderboard/discord/leaderboard_updated/leaderboard_updated.go
//
// Generated by this command:
//
//	mockgen -source=./app/leaderboard/discord/leaderboard_updated/leaderboard_updated.go -destination=./app/leaderboard/mocks/mock_leaderboard_updated_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	leaderboardupdated "github.com/Black-And-White-Club/discord-frolf-bot/app/leaderboard/discord/leaderboard_updated"
	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockLeaderboardUpdateManager is a mock of LeaderboardUpdateManager interface.
type MockLeaderboardUpdateManager struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderboardUpdateManagerMockRecorder
	isgomock struct{}
}

// MockLeaderboardUpdateManagerMockRecorder is the mock recorder for MockLeaderboardUpdateManager.
type MockLeaderboardUpdateManagerMockRecorder struct {
	mock *MockLeaderboardUpdateManager
}

// NewMockLeaderboardUpdateManager creates a new mock instance.
func NewMockLeaderboardUpdateManager(ctrl *gomock.Controller) *MockLeaderboardUpdateManager {
	mock := &MockLeaderboardUpdateManager{ctrl: ctrl}
	mock.recorder = &MockLeaderboardUpdateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderboardUpdateManager) EXPECT() *MockLeaderboardUpdateManagerMockRecorder {
	return m.recorder
}

// HandleLeaderboardPagination mocks base method.
func (m *MockLeaderboardUpdateManager) HandleLeaderboardPagination(ctx context.Context, i *discordgo.InteractionCreate) (leaderboardupdated.LeaderboardUpdateOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleLeaderboardPagination", ctx, i)
	ret0, _ := ret[0].(leaderboardupdated.LeaderboardUpdateOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleLeaderboardPagination indicates an expected call of HandleLeaderboardPagination.
func (mr *MockLeaderboardUpdateManagerMockRecorder) HandleLeaderboardPagination(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleLeaderboardPagination", reflect.TypeOf((*MockLeaderboardUpdateManager)(nil).HandleLeaderboardPagination), ctx, i)
}

// SendLeaderboardEmbed mocks base method.
func (m *MockLeaderboardUpdateManager) SendLeaderboardEmbed(ctx context.Context, channelID string, leaderboard []leaderboardupdated.LeaderboardEntry, page int32) (leaderboardupdated.LeaderboardUpdateOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLeaderboardEmbed", ctx, channelID, leaderboard, page)
	ret0, _ := ret[0].(leaderboardupdated.LeaderboardUpdateOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendLeaderboardEmbed indicates an expected call of SendLeaderboardEmbed.
func (mr *MockLeaderboardUpdateManagerMockRecorder) SendLeaderboardEmbed(ctx, channelID, leaderboard, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLeaderboardEmbed", reflect.TypeOf((*MockLeaderboardUpdateManager)(nil).SendLeaderboardEmbed), ctx, channelID, leaderboard, page)
}
