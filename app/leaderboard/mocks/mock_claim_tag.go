// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/leaderboard/discord/claim_tag/claim_tag.go
//
// Generated by this command:
//
//	mockgen -source=./app/leaderboard/discord/claim_tag/claim_tag.go -destination=./app/leaderboard/mocks/mock_claim_tag.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	claimtag "github.com/Black-And-White-Club/discord-frolf-bot/app/leaderboard/discord/claim_tag"
	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockClaimTagManager is a mock of ClaimTagManager interface.
type MockClaimTagManager struct {
	ctrl     *gomock.Controller
	recorder *MockClaimTagManagerMockRecorder
	isgomock struct{}
}

// MockClaimTagManagerMockRecorder is the mock recorder for MockClaimTagManager.
type MockClaimTagManagerMockRecorder struct {
	mock *MockClaimTagManager
}

// NewMockClaimTagManager creates a new mock instance.
func NewMockClaimTagManager(ctrl *gomock.Controller) *MockClaimTagManager {
	mock := &MockClaimTagManager{ctrl: ctrl}
	mock.recorder = &MockClaimTagManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClaimTagManager) EXPECT() *MockClaimTagManagerMockRecorder {
	return m.recorder
}

// HandleClaimTagCommand mocks base method.
func (m *MockClaimTagManager) HandleClaimTagCommand(ctx context.Context, i *discordgo.InteractionCreate) (claimtag.ClaimTagOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleClaimTagCommand", ctx, i)
	ret0, _ := ret[0].(claimtag.ClaimTagOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleClaimTagCommand indicates an expected call of HandleClaimTagCommand.
func (mr *MockClaimTagManagerMockRecorder) HandleClaimTagCommand(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleClaimTagCommand", reflect.TypeOf((*MockClaimTagManager)(nil).HandleClaimTagCommand), ctx, i)
}

// UpdateInteractionResponse mocks base method.
func (m *MockClaimTagManager) UpdateInteractionResponse(ctx context.Context, correlationID, message string) (claimtag.ClaimTagOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInteractionResponse", ctx, correlationID, message)
	ret0, _ := ret[0].(claimtag.ClaimTagOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInteractionResponse indicates an expected call of UpdateInteractionResponse.
func (mr *MockClaimTagManagerMockRecorder) UpdateInteractionResponse(ctx, correlationID, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInteractionResponse", reflect.TypeOf((*MockClaimTagManager)(nil).UpdateInteractionResponse), ctx, correlationID, message)
}
