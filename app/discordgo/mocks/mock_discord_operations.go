// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/discordgo/operations.go
//
// Generated by this command:
//
//	mockgen -source=./app/discordgo/operations.go -destination=./app/discordgo/mocks/mock_discord_operations.go -package=discordmocks
//

// Package discordmocks is a generated GoMock package.
package discordmocks

import (
	context "context"
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockOperations is a mock of Operations interface.
type MockOperations struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsMockRecorder
	isgomock struct{}
}

// MockOperationsMockRecorder is the mock recorder for MockOperations.
type MockOperationsMockRecorder struct {
	mock *MockOperations
}

// NewMockOperations creates a new mock instance.
func NewMockOperations(ctrl *gomock.Controller) *MockOperations {
	mock := &MockOperations{ctrl: ctrl}
	mock.recorder = &MockOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperations) EXPECT() *MockOperationsMockRecorder {
	return m.recorder
}

// SendDM mocks base method.
func (m *MockOperations) SendDM(ctx context.Context, userID, message string) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDM", ctx, userID, message)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDM indicates an expected call of SendDM.
func (mr *MockOperationsMockRecorder) SendDM(ctx, userID, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDM", reflect.TypeOf((*MockOperations)(nil).SendDM), ctx, userID, message)
}
