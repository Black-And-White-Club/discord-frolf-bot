// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/discordgo/discord.go
//
// Generated by this command:
//
//	mockgen -source=./app/discordgo/discord.go -destination=./app/discordgo/mocks/mock_discord.go -package=discordmocks
//

// Package discordmocks is a generated GoMock package.
package discordmocks

import (
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
	isgomock struct{}
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// AddHandler mocks base method.
func (m *MockSession) AddHandler(handler any) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHandler", handler)
	ret0, _ := ret[0].(func())
	return ret0
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockSessionMockRecorder) AddHandler(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockSession)(nil).AddHandler), handler)
}

// ApplicationCommandCreate mocks base method.
func (m *MockSession) ApplicationCommandCreate(appID, guildID string, cmd *discordgo.ApplicationCommand, options ...discordgo.RequestOption) (*discordgo.ApplicationCommand, error) {
	m.ctrl.T.Helper()
	varargs := []any{appID, guildID, cmd}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationCommandCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.ApplicationCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCommandCreate indicates an expected call of ApplicationCommandCreate.
func (mr *MockSessionMockRecorder) ApplicationCommandCreate(appID, guildID, cmd any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, guildID, cmd}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandCreate", reflect.TypeOf((*MockSession)(nil).ApplicationCommandCreate), varargs...)
}

// ApplicationCommandDelete mocks base method.
func (m *MockSession) ApplicationCommandDelete(appID, guildID, cmdID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{appID, guildID, cmdID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationCommandDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationCommandDelete indicates an expected call of ApplicationCommandDelete.
func (mr *MockSessionMockRecorder) ApplicationCommandDelete(appID, guildID, cmdID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, guildID, cmdID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandDelete", reflect.TypeOf((*MockSession)(nil).ApplicationCommandDelete), varargs...)
}

// ApplicationCommandPermissionsEdit mocks base method.
func (m *MockSession) ApplicationCommandPermissionsEdit(appID, guildID, cmdID string, permissions *discordgo.ApplicationCommandPermissionsList, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{appID, guildID, cmdID, permissions}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationCommandPermissionsEdit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationCommandPermissionsEdit indicates an expected call of ApplicationCommandPermissionsEdit.
func (mr *MockSessionMockRecorder) ApplicationCommandPermissionsEdit(appID, guildID, cmdID, permissions any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, guildID, cmdID, permissions}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandPermissionsEdit", reflect.TypeOf((*MockSession)(nil).ApplicationCommandPermissionsEdit), varargs...)
}

// ApplicationCommands mocks base method.
func (m *MockSession) ApplicationCommands(appID, guildID string, options ...discordgo.RequestOption) ([]*discordgo.ApplicationCommand, error) {
	m.ctrl.T.Helper()
	varargs := []any{appID, guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationCommands", varargs...)
	ret0, _ := ret[0].([]*discordgo.ApplicationCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCommands indicates an expected call of ApplicationCommands.
func (mr *MockSessionMockRecorder) ApplicationCommands(appID, guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommands", reflect.TypeOf((*MockSession)(nil).ApplicationCommands), varargs...)
}

// ChannelEdit mocks base method.
func (m *MockSession) ChannelEdit(channelID string, data *discordgo.ChannelEdit, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelEdit indicates an expected call of ChannelEdit.
func (mr *MockSessionMockRecorder) ChannelEdit(channelID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelEdit", reflect.TypeOf((*MockSession)(nil).ChannelEdit), varargs...)
}

// ChannelMessage mocks base method.
func (m *MockSession) ChannelMessage(channelID, messageID string, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessage", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessage indicates an expected call of ChannelMessage.
func (mr *MockSessionMockRecorder) ChannelMessage(channelID, messageID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessage", reflect.TypeOf((*MockSession)(nil).ChannelMessage), varargs...)
}

// ChannelMessageDelete mocks base method.
func (m *MockSession) ChannelMessageDelete(channelID, messageID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelMessageDelete indicates an expected call of ChannelMessageDelete.
func (mr *MockSessionMockRecorder) ChannelMessageDelete(channelID, messageID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageDelete", reflect.TypeOf((*MockSession)(nil).ChannelMessageDelete), varargs...)
}

// ChannelMessageEditComplex mocks base method.
func (m_2 *MockSession) ChannelMessageEditComplex(m *discordgo.MessageEdit, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m_2.ctrl.T.Helper()
	varargs := []any{m}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "ChannelMessageEditComplex", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageEditComplex indicates an expected call of ChannelMessageEditComplex.
func (mr *MockSessionMockRecorder) ChannelMessageEditComplex(m any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{m}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageEditComplex", reflect.TypeOf((*MockSession)(nil).ChannelMessageEditComplex), varargs...)
}

// ChannelMessageEditEmbed mocks base method.
func (m *MockSession) ChannelMessageEditEmbed(channelID, messageID string, embed *discordgo.MessageEmbed, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID, embed}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageEditEmbed", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageEditEmbed indicates an expected call of ChannelMessageEditEmbed.
func (mr *MockSessionMockRecorder) ChannelMessageEditEmbed(channelID, messageID, embed any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID, embed}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageEditEmbed", reflect.TypeOf((*MockSession)(nil).ChannelMessageEditEmbed), varargs...)
}

// ChannelMessageSend mocks base method.
func (m *MockSession) ChannelMessageSend(channelID, content string, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, content}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSend", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSend indicates an expected call of ChannelMessageSend.
func (mr *MockSessionMockRecorder) ChannelMessageSend(channelID, content any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, content}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSend", reflect.TypeOf((*MockSession)(nil).ChannelMessageSend), varargs...)
}

// ChannelMessageSendComplex mocks base method.
func (m *MockSession) ChannelMessageSendComplex(channelID string, data *discordgo.MessageSend, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSendComplex", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendComplex indicates an expected call of ChannelMessageSendComplex.
func (mr *MockSessionMockRecorder) ChannelMessageSendComplex(channelID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendComplex", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendComplex), varargs...)
}

// ChannelMessages mocks base method.
func (m *MockSession) ChannelMessages(channelID string, limit int, beforeID, afterID, aroundID string, options ...discordgo.RequestOption) ([]*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, limit, beforeID, afterID, aroundID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessages", varargs...)
	ret0, _ := ret[0].([]*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessages indicates an expected call of ChannelMessages.
func (mr *MockSessionMockRecorder) ChannelMessages(channelID, limit, beforeID, afterID, aroundID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, limit, beforeID, afterID, aroundID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessages", reflect.TypeOf((*MockSession)(nil).ChannelMessages), varargs...)
}

// Close mocks base method.
func (m *MockSession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close))
}

// FollowupMessageCreate mocks base method.
func (m *MockSession) FollowupMessageCreate(interaction *discordgo.Interaction, wait bool, data *discordgo.WebhookParams, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{interaction, wait, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowupMessageCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowupMessageCreate indicates an expected call of FollowupMessageCreate.
func (mr *MockSessionMockRecorder) FollowupMessageCreate(interaction, wait, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, wait, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowupMessageCreate", reflect.TypeOf((*MockSession)(nil).FollowupMessageCreate), varargs...)
}

// FollowupMessageEdit mocks base method.
func (m *MockSession) FollowupMessageEdit(interaction *discordgo.Interaction, messageID string, data *discordgo.WebhookEdit, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{interaction, messageID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowupMessageEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowupMessageEdit indicates an expected call of FollowupMessageEdit.
func (mr *MockSessionMockRecorder) FollowupMessageEdit(interaction, messageID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, messageID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowupMessageEdit", reflect.TypeOf((*MockSession)(nil).FollowupMessageEdit), varargs...)
}

// GetBotUser mocks base method.
func (m *MockSession) GetBotUser() (*discordgo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotUser")
	ret0, _ := ret[0].(*discordgo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBotUser indicates an expected call of GetBotUser.
func (mr *MockSessionMockRecorder) GetBotUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotUser", reflect.TypeOf((*MockSession)(nil).GetBotUser))
}

// GetChannel mocks base method.
func (m *MockSession) GetChannel(channelID string, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChannel", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockSessionMockRecorder) GetChannel(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockSession)(nil).GetChannel), varargs...)
}

// Guild mocks base method.
func (m *MockSession) Guild(guildID string, options ...discordgo.RequestOption) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Guild", varargs...)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Guild indicates an expected call of Guild.
func (mr *MockSessionMockRecorder) Guild(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Guild", reflect.TypeOf((*MockSession)(nil).Guild), varargs...)
}

// GuildChannelCreate mocks base method.
func (m *MockSession) GuildChannelCreate(guildID, name string, ctype discordgo.ChannelType, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, name, ctype}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildChannelCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildChannelCreate indicates an expected call of GuildChannelCreate.
func (mr *MockSessionMockRecorder) GuildChannelCreate(guildID, name, ctype any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, name, ctype}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildChannelCreate", reflect.TypeOf((*MockSession)(nil).GuildChannelCreate), varargs...)
}

// GuildChannels mocks base method.
func (m *MockSession) GuildChannels(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildChannels", varargs...)
	ret0, _ := ret[0].([]*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildChannels indicates an expected call of GuildChannels.
func (mr *MockSessionMockRecorder) GuildChannels(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildChannels", reflect.TypeOf((*MockSession)(nil).GuildChannels), varargs...)
}

// GuildMember mocks base method.
func (m *MockSession) GuildMember(guildID, userID string, options ...discordgo.RequestOption) (*discordgo.Member, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMember", varargs...)
	ret0, _ := ret[0].(*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildMember indicates an expected call of GuildMember.
func (mr *MockSessionMockRecorder) GuildMember(guildID, userID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMember", reflect.TypeOf((*MockSession)(nil).GuildMember), varargs...)
}

// GuildMemberRoleAdd mocks base method.
func (m *MockSession) GuildMemberRoleAdd(guildID, userID, roleID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, roleID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberRoleAdd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberRoleAdd indicates an expected call of GuildMemberRoleAdd.
func (mr *MockSessionMockRecorder) GuildMemberRoleAdd(guildID, userID, roleID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, roleID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberRoleAdd", reflect.TypeOf((*MockSession)(nil).GuildMemberRoleAdd), varargs...)
}

// GuildMemberRoleRemove mocks base method.
func (m *MockSession) GuildMemberRoleRemove(guildID, userID, roleID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, roleID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberRoleRemove", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberRoleRemove indicates an expected call of GuildMemberRoleRemove.
func (mr *MockSessionMockRecorder) GuildMemberRoleRemove(guildID, userID, roleID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, roleID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberRoleRemove", reflect.TypeOf((*MockSession)(nil).GuildMemberRoleRemove), varargs...)
}

// GuildRoleCreate mocks base method.
func (m *MockSession) GuildRoleCreate(guildID string, params *discordgo.RoleParams, options ...discordgo.RequestOption) (*discordgo.Role, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildRoleCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildRoleCreate indicates an expected call of GuildRoleCreate.
func (mr *MockSessionMockRecorder) GuildRoleCreate(guildID, params any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildRoleCreate", reflect.TypeOf((*MockSession)(nil).GuildRoleCreate), varargs...)
}

// GuildScheduledEventCreate mocks base method.
func (m *MockSession) GuildScheduledEventCreate(guildID string, params *discordgo.GuildScheduledEventParams, options ...discordgo.RequestOption) (*discordgo.GuildScheduledEvent, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildScheduledEventCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.GuildScheduledEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildScheduledEventCreate indicates an expected call of GuildScheduledEventCreate.
func (mr *MockSessionMockRecorder) GuildScheduledEventCreate(guildID, params any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildScheduledEventCreate", reflect.TypeOf((*MockSession)(nil).GuildScheduledEventCreate), varargs...)
}

// GuildScheduledEventEdit mocks base method.
func (m *MockSession) GuildScheduledEventEdit(guildID, eventID string, params *discordgo.GuildScheduledEventParams, options ...discordgo.RequestOption) (*discordgo.GuildScheduledEvent, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, eventID, params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildScheduledEventEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.GuildScheduledEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildScheduledEventEdit indicates an expected call of GuildScheduledEventEdit.
func (mr *MockSessionMockRecorder) GuildScheduledEventEdit(guildID, eventID, params any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, eventID, params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildScheduledEventEdit", reflect.TypeOf((*MockSession)(nil).GuildScheduledEventEdit), varargs...)
}

// InteractionRespond mocks base method.
func (m *MockSession) InteractionRespond(interaction *discordgo.Interaction, resp *discordgo.InteractionResponse, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{interaction, resp}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InteractionRespond", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InteractionRespond indicates an expected call of InteractionRespond.
func (mr *MockSessionMockRecorder) InteractionRespond(interaction, resp any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, resp}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionRespond", reflect.TypeOf((*MockSession)(nil).InteractionRespond), varargs...)
}

// InteractionResponseEdit mocks base method.
func (m *MockSession) InteractionResponseEdit(interaction *discordgo.Interaction, newresp *discordgo.WebhookEdit, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{interaction, newresp}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InteractionResponseEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InteractionResponseEdit indicates an expected call of InteractionResponseEdit.
func (mr *MockSessionMockRecorder) InteractionResponseEdit(interaction, newresp any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, newresp}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionResponseEdit", reflect.TypeOf((*MockSession)(nil).InteractionResponseEdit), varargs...)
}

// MessageReactionAdd mocks base method.
func (m *MockSession) MessageReactionAdd(channelID, messageID, emojiID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageReactionAdd", channelID, messageID, emojiID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageReactionAdd indicates an expected call of MessageReactionAdd.
func (mr *MockSessionMockRecorder) MessageReactionAdd(channelID, messageID, emojiID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionAdd", reflect.TypeOf((*MockSession)(nil).MessageReactionAdd), channelID, messageID, emojiID)
}

// MessageThreadStartComplex mocks base method.
func (m *MockSession) MessageThreadStartComplex(channelID, messageID string, data *discordgo.ThreadStart, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MessageThreadStartComplex", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageThreadStartComplex indicates an expected call of MessageThreadStartComplex.
func (mr *MockSessionMockRecorder) MessageThreadStartComplex(channelID, messageID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageThreadStartComplex", reflect.TypeOf((*MockSession)(nil).MessageThreadStartComplex), varargs...)
}

// Open mocks base method.
func (m *MockSession) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockSessionMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockSession)(nil).Open))
}

// ThreadMemberAdd mocks base method.
func (m *MockSession) ThreadMemberAdd(threadID, memberID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{threadID, memberID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadMemberAdd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ThreadMemberAdd indicates an expected call of ThreadMemberAdd.
func (mr *MockSessionMockRecorder) ThreadMemberAdd(threadID, memberID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{threadID, memberID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadMemberAdd", reflect.TypeOf((*MockSession)(nil).ThreadMemberAdd), varargs...)
}

// ThreadStartComplex mocks base method.
func (m *MockSession) ThreadStartComplex(channelID string, data *discordgo.ThreadStart, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadStartComplex", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadStartComplex indicates an expected call of ThreadStartComplex.
func (mr *MockSessionMockRecorder) ThreadStartComplex(channelID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadStartComplex", reflect.TypeOf((*MockSession)(nil).ThreadStartComplex), varargs...)
}

// ThreadsActive mocks base method.
func (m *MockSession) ThreadsActive(channelID string, options ...discordgo.RequestOption) (*discordgo.ThreadsList, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadsActive", varargs...)
	ret0, _ := ret[0].(*discordgo.ThreadsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadsActive indicates an expected call of ThreadsActive.
func (mr *MockSessionMockRecorder) ThreadsActive(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadsActive", reflect.TypeOf((*MockSession)(nil).ThreadsActive), varargs...)
}

// User mocks base method.
func (m *MockSession) User(userID string, options ...discordgo.RequestOption) (*discordgo.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{userID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "User", varargs...)
	ret0, _ := ret[0].(*discordgo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockSessionMockRecorder) User(userID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{userID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockSession)(nil).User), varargs...)
}

// UserChannelCreate mocks base method.
func (m *MockSession) UserChannelCreate(recipientID string, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{recipientID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserChannelCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChannelCreate indicates an expected call of UserChannelCreate.
func (mr *MockSessionMockRecorder) UserChannelCreate(recipientID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{recipientID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChannelCreate", reflect.TypeOf((*MockSession)(nil).UserChannelCreate), varargs...)
}

// WebhookExecute mocks base method.
func (m *MockSession) WebhookExecute(webhookID, token string, wait bool, data *discordgo.WebhookParams, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{webhookID, token, wait, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookExecute", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookExecute indicates an expected call of WebhookExecute.
func (mr *MockSessionMockRecorder) WebhookExecute(webhookID, token, wait, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{webhookID, token, wait, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookExecute", reflect.TypeOf((*MockSession)(nil).WebhookExecute), varargs...)
}

// WebhookMessageEdit mocks base method.
func (m *MockSession) WebhookMessageEdit(webhookID, token, messageID string, data *discordgo.WebhookEdit, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{webhookID, token, messageID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookMessageEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookMessageEdit indicates an expected call of WebhookMessageEdit.
func (mr *MockSessionMockRecorder) WebhookMessageEdit(webhookID, token, messageID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{webhookID, token, messageID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookMessageEdit", reflect.TypeOf((*MockSession)(nil).WebhookMessageEdit), varargs...)
}

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
	isgomock struct{}
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// Channel mocks base method.
func (m *MockState) Channel(channelID string) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel", channelID)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channel indicates an expected call of Channel.
func (mr *MockStateMockRecorder) Channel(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockState)(nil).Channel), channelID)
}

// Guild mocks base method.
func (m *MockState) Guild(guildID string) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Guild", guildID)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Guild indicates an expected call of Guild.
func (mr *MockStateMockRecorder) Guild(guildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Guild", reflect.TypeOf((*MockState)(nil).Guild), guildID)
}

// Member mocks base method.
func (m *MockState) Member(guildID, userID string) (*discordgo.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Member", guildID, userID)
	ret0, _ := ret[0].(*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Member indicates an expected call of Member.
func (mr *MockStateMockRecorder) Member(guildID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Member", reflect.TypeOf((*MockState)(nil).Member), guildID, userID)
}

// UserChannelPermissions mocks base method.
func (m *MockState) UserChannelPermissions(userID, channelID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserChannelPermissions", userID, channelID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChannelPermissions indicates an expected call of UserChannelPermissions.
func (mr *MockStateMockRecorder) UserChannelPermissions(userID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChannelPermissions", reflect.TypeOf((*MockState)(nil).UserChannelPermissions), userID, channelID)
}
