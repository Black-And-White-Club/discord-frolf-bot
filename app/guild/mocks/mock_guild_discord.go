// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/guild/discord/discord.go
//
// Generated by this command:
//
//	mockgen -source=./app/guild/discord/discord.go -destination=./app/guild/mocks/mock_guild_discord.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	setup "github.com/Black-And-White-Club/discord-frolf-bot/app/guild/discord/setup"
	gomock "go.uber.org/mock/gomock"
)

// MockGuildDiscordInterface is a mock of GuildDiscordInterface interface.
type MockGuildDiscordInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGuildDiscordInterfaceMockRecorder
	isgomock struct{}
}

// MockGuildDiscordInterfaceMockRecorder is the mock recorder for MockGuildDiscordInterface.
type MockGuildDiscordInterfaceMockRecorder struct {
	mock *MockGuildDiscordInterface
}

// NewMockGuildDiscordInterface creates a new mock instance.
func NewMockGuildDiscordInterface(ctrl *gomock.Controller) *MockGuildDiscordInterface {
	mock := &MockGuildDiscordInterface{ctrl: ctrl}
	mock.recorder = &MockGuildDiscordInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuildDiscordInterface) EXPECT() *MockGuildDiscordInterfaceMockRecorder {
	return m.recorder
}

// GetSetupManager mocks base method.
func (m *MockGuildDiscordInterface) GetSetupManager() setup.SetupManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSetupManager")
	ret0, _ := ret[0].(setup.SetupManager)
	return ret0
}

// GetSetupManager indicates an expected call of GetSetupManager.
func (mr *MockGuildDiscordInterfaceMockRecorder) GetSetupManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetupManager", reflect.TypeOf((*MockGuildDiscordInterface)(nil).GetSetupManager))
}

// RegisterAllCommands mocks base method.
func (m *MockGuildDiscordInterface) RegisterAllCommands(guildID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAllCommands", guildID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAllCommands indicates an expected call of RegisterAllCommands.
func (mr *MockGuildDiscordInterfaceMockRecorder) RegisterAllCommands(guildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAllCommands", reflect.TypeOf((*MockGuildDiscordInterface)(nil).RegisterAllCommands), guildID)
}

// UnregisterAllCommands mocks base method.
func (m *MockGuildDiscordInterface) UnregisterAllCommands(guildID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterAllCommands", guildID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterAllCommands indicates an expected call of UnregisterAllCommands.
func (mr *MockGuildDiscordInterfaceMockRecorder) UnregisterAllCommands(guildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterAllCommands", reflect.TypeOf((*MockGuildDiscordInterface)(nil).UnregisterAllCommands), guildID)
}
