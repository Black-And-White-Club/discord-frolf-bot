// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/guild/discord/setup/setup_config_manager.go
//
// Generated by this command:
//
//	mockgen -source=./app/guild/discord/setup/setup_config_manager.go -destination=./app/guild/mocks/mock_setup_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockSetupManager is a mock of SetupManager interface.
type MockSetupManager struct {
	ctrl     *gomock.Controller
	recorder *MockSetupManagerMockRecorder
	isgomock struct{}
}

// MockSetupManagerMockRecorder is the mock recorder for MockSetupManager.
type MockSetupManagerMockRecorder struct {
	mock *MockSetupManager
}

// NewMockSetupManager creates a new mock instance.
func NewMockSetupManager(ctrl *gomock.Controller) *MockSetupManager {
	mock := &MockSetupManager{ctrl: ctrl}
	mock.recorder = &MockSetupManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetupManager) EXPECT() *MockSetupManagerMockRecorder {
	return m.recorder
}

// HandleSetupCommand mocks base method.
func (m *MockSetupManager) HandleSetupCommand(ctx context.Context, i *discordgo.InteractionCreate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSetupCommand", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSetupCommand indicates an expected call of HandleSetupCommand.
func (mr *MockSetupManagerMockRecorder) HandleSetupCommand(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSetupCommand", reflect.TypeOf((*MockSetupManager)(nil).HandleSetupCommand), ctx, i)
}

// HandleSetupModalSubmit mocks base method.
func (m *MockSetupManager) HandleSetupModalSubmit(ctx context.Context, i *discordgo.InteractionCreate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSetupModalSubmit", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSetupModalSubmit indicates an expected call of HandleSetupModalSubmit.
func (mr *MockSetupManagerMockRecorder) HandleSetupModalSubmit(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSetupModalSubmit", reflect.TypeOf((*MockSetupManager)(nil).HandleSetupModalSubmit), ctx, i)
}

// SendSetupModal mocks base method.
func (m *MockSetupManager) SendSetupModal(ctx context.Context, i *discordgo.InteractionCreate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSetupModal", ctx, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSetupModal indicates an expected call of SendSetupModal.
func (mr *MockSetupManagerMockRecorder) SendSetupModal(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSetupModal", reflect.TypeOf((*MockSetupManager)(nil).SendSetupModal), ctx, i)
}
