// Code generated by MockGen. DO NOT EDIT.
// Source: app/guild/discord/setup/setup_session.go
//
// mockgen -source=./app/guild/discord/setup/setup_session.go -destination=./app/guild/mocks/mock_setup_session.go -package=mocks

package mocks

import (
	reflect "reflect"

	"github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockSetupSession is a mock of SetupSession interface.
type MockSetupSession struct {
	ctrl     *gomock.Controller
	recorder *MockSetupSessionMockRecorder
}

// MockSetupSessionMockRecorder is the mock recorder for MockSetupSession.
type MockSetupSessionMockRecorder struct {
	mock *MockSetupSession
}

// NewMockSetupSession creates a new mock instance.
func NewMockSetupSession(ctrl *gomock.Controller) *MockSetupSession {
	mock := &MockSetupSession{ctrl: ctrl}
	mock.recorder = &MockSetupSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetupSession) EXPECT() *MockSetupSessionMockRecorder { return m.recorder }

func (m *MockSetupSession) Guild(id string, options ...discordgo.RequestOption) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	varargs := []any{id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Guild", varargs...)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockSetupSessionMockRecorder) Guild(id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Guild", reflect.TypeOf((*MockSetupSession)(nil).Guild), varargs...)
}

func (m *MockSetupSession) GuildChannels(id string, options ...discordgo.RequestOption) ([]*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildChannels", varargs...)
	ret0, _ := ret[0].([]*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockSetupSessionMockRecorder) GuildChannels(id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildChannels", reflect.TypeOf((*MockSetupSession)(nil).GuildChannels), varargs...)
}

func (m *MockSetupSession) GuildChannelCreate(guildID, name string, ctype discordgo.ChannelType, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, name, ctype}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildChannelCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockSetupSessionMockRecorder) GuildChannelCreate(guildID, name, ctype any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, name, ctype}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildChannelCreate", reflect.TypeOf((*MockSetupSession)(nil).GuildChannelCreate), varargs...)
}

func (m *MockSetupSession) ChannelEdit(channelID string, data *discordgo.ChannelEdit, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockSetupSessionMockRecorder) ChannelEdit(channelID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelEdit", reflect.TypeOf((*MockSetupSession)(nil).ChannelEdit), varargs...)
}

func (m *MockSetupSession) GuildRoleCreate(guildID string, params *discordgo.RoleParams, options ...discordgo.RequestOption) (*discordgo.Role, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildRoleCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockSetupSessionMockRecorder) GuildRoleCreate(guildID, params any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildRoleCreate", reflect.TypeOf((*MockSetupSession)(nil).GuildRoleCreate), varargs...)
}

func (m *MockSetupSession) ChannelMessageSend(channelID, content string, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, content}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSend", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockSetupSessionMockRecorder) ChannelMessageSend(channelID, content any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, content}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSend", reflect.TypeOf((*MockSetupSession)(nil).ChannelMessageSend), varargs...)
}

func (m *MockSetupSession) MessageReactionAdd(channelID, messageID, emojiID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID, emojiID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MessageReactionAdd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockSetupSessionMockRecorder) MessageReactionAdd(channelID, messageID, emojiID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID, emojiID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionAdd", reflect.TypeOf((*MockSetupSession)(nil).MessageReactionAdd), varargs...)
}

func (m *MockSetupSession) InteractionRespond(interaction *discordgo.Interaction, resp *discordgo.InteractionResponse, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{interaction, resp}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InteractionRespond", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockSetupSessionMockRecorder) InteractionRespond(interaction, resp any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, resp}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionRespond", reflect.TypeOf((*MockSetupSession)(nil).InteractionRespond), varargs...)
}

func (m *MockSetupSession) InteractionResponseEdit(interaction *discordgo.Interaction, newresp *discordgo.WebhookEdit, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{interaction, newresp}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InteractionResponseEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockSetupSessionMockRecorder) InteractionResponseEdit(interaction, newresp any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, newresp}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionResponseEdit", reflect.TypeOf((*MockSetupSession)(nil).InteractionResponseEdit), varargs...)
}

func (m *MockSetupSession) FollowupMessageCreate(interaction *discordgo.Interaction, wait bool, data *discordgo.WebhookParams, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{interaction, wait, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowupMessageCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockSetupSessionMockRecorder) FollowupMessageCreate(interaction, wait, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, wait, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowupMessageCreate", reflect.TypeOf((*MockSetupSession)(nil).FollowupMessageCreate), varargs...)
}

func (m *MockSetupSession) FollowupMessageEdit(interaction *discordgo.Interaction, messageID string, data *discordgo.WebhookEdit, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{interaction, messageID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowupMessageEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockSetupSessionMockRecorder) FollowupMessageEdit(interaction, messageID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, messageID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowupMessageEdit", reflect.TypeOf((*MockSetupSession)(nil).FollowupMessageEdit), varargs...)
}
