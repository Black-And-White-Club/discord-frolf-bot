// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/user/discord/signup/signup.go
//
// Generated by this command:
//
//	mockgen -source=./app/user/discord/signup/signup.go -destination=./app/user/mocks/mock_signup_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	discord "github.com/Black-And-White-Club/discord-frolf-bot/app/discordgo"
	signup "github.com/Black-And-White-Club/discord-frolf-bot/app/user/discord/signup"
	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockSignupManager is a mock of SignupManager interface.
type MockSignupManager struct {
	ctrl     *gomock.Controller
	recorder *MockSignupManagerMockRecorder
	isgomock struct{}
}

// MockSignupManagerMockRecorder is the mock recorder for MockSignupManager.
type MockSignupManagerMockRecorder struct {
	mock *MockSignupManager
}

// NewMockSignupManager creates a new mock instance.
func NewMockSignupManager(ctrl *gomock.Controller) *MockSignupManager {
	mock := &MockSignupManager{ctrl: ctrl}
	mock.recorder = &MockSignupManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignupManager) EXPECT() *MockSignupManagerMockRecorder {
	return m.recorder
}

// HandleSignupButtonPress mocks base method.
func (m *MockSignupManager) HandleSignupButtonPress(ctx context.Context, i *discordgo.InteractionCreate) (signup.SignupOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSignupButtonPress", ctx, i)
	ret0, _ := ret[0].(signup.SignupOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleSignupButtonPress indicates an expected call of HandleSignupButtonPress.
func (mr *MockSignupManagerMockRecorder) HandleSignupButtonPress(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSignupButtonPress", reflect.TypeOf((*MockSignupManager)(nil).HandleSignupButtonPress), ctx, i)
}

// HandleSignupModalSubmit mocks base method.
func (m *MockSignupManager) HandleSignupModalSubmit(ctx context.Context, i *discordgo.InteractionCreate) (signup.SignupOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSignupModalSubmit", ctx, i)
	ret0, _ := ret[0].(signup.SignupOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleSignupModalSubmit indicates an expected call of HandleSignupModalSubmit.
func (mr *MockSignupManagerMockRecorder) HandleSignupModalSubmit(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSignupModalSubmit", reflect.TypeOf((*MockSignupManager)(nil).HandleSignupModalSubmit), ctx, i)
}

// HandleSignupReactionAdd mocks base method.
func (m *MockSignupManager) HandleSignupReactionAdd(ctx context.Context, r *discordgo.MessageReactionAdd) (signup.SignupOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSignupReactionAdd", ctx, r)
	ret0, _ := ret[0].(signup.SignupOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleSignupReactionAdd indicates an expected call of HandleSignupReactionAdd.
func (mr *MockSignupManagerMockRecorder) HandleSignupReactionAdd(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSignupReactionAdd", reflect.TypeOf((*MockSignupManager)(nil).HandleSignupReactionAdd), ctx, r)
}

// MessageReactionAdd mocks base method.
func (m *MockSignupManager) MessageReactionAdd(s discord.Session, r *discordgo.MessageReactionAdd) (signup.SignupOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageReactionAdd", s, r)
	ret0, _ := ret[0].(signup.SignupOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageReactionAdd indicates an expected call of MessageReactionAdd.
func (mr *MockSignupManagerMockRecorder) MessageReactionAdd(s, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionAdd", reflect.TypeOf((*MockSignupManager)(nil).MessageReactionAdd), s, r)
}

// SendSignupModal mocks base method.
func (m *MockSignupManager) SendSignupModal(ctx context.Context, i *discordgo.InteractionCreate) (signup.SignupOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSignupModal", ctx, i)
	ret0, _ := ret[0].(signup.SignupOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSignupModal indicates an expected call of SendSignupModal.
func (mr *MockSignupManagerMockRecorder) SendSignupModal(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSignupModal", reflect.TypeOf((*MockSignupManager)(nil).SendSignupModal), ctx, i)
}

// SendSignupResult mocks base method.
func (m *MockSignupManager) SendSignupResult(ctx context.Context, interactionToken string, success bool) (signup.SignupOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSignupResult", ctx, interactionToken, success)
	ret0, _ := ret[0].(signup.SignupOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSignupResult indicates an expected call of SendSignupResult.
func (mr *MockSignupManagerMockRecorder) SendSignupResult(ctx, interactionToken, success any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSignupResult", reflect.TypeOf((*MockSignupManager)(nil).SendSignupResult), ctx, interactionToken, success)
}
