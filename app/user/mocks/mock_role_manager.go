// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/user/discord/role/role.go
//
// Generated by this command:
//
//	mockgen -source=./app/user/discord/role/role.go -destination=./app/user/mocks/mock_role_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockRoleManager is a mock of RoleManager interface.
type MockRoleManager struct {
	ctrl     *gomock.Controller
	recorder *MockRoleManagerMockRecorder
	isgomock struct{}
}

// MockRoleManagerMockRecorder is the mock recorder for MockRoleManager.
type MockRoleManagerMockRecorder struct {
	mock *MockRoleManager
}

// NewMockRoleManager creates a new mock instance.
func NewMockRoleManager(ctrl *gomock.Controller) *MockRoleManager {
	mock := &MockRoleManager{ctrl: ctrl}
	mock.recorder = &MockRoleManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleManager) EXPECT() *MockRoleManagerMockRecorder {
	return m.recorder
}

// AddRoleToUser mocks base method.
func (m *MockRoleManager) AddRoleToUser(ctx context.Context, guildID, userID, roleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoleToUser", ctx, guildID, userID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoleToUser indicates an expected call of AddRoleToUser.
func (mr *MockRoleManagerMockRecorder) AddRoleToUser(ctx, guildID, userID, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleToUser", reflect.TypeOf((*MockRoleManager)(nil).AddRoleToUser), ctx, guildID, userID, roleID)
}

// EditRoleUpdateResponse mocks base method.
func (m *MockRoleManager) EditRoleUpdateResponse(ctx context.Context, correlationID, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditRoleUpdateResponse", ctx, correlationID, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditRoleUpdateResponse indicates an expected call of EditRoleUpdateResponse.
func (mr *MockRoleManagerMockRecorder) EditRoleUpdateResponse(ctx, correlationID, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditRoleUpdateResponse", reflect.TypeOf((*MockRoleManager)(nil).EditRoleUpdateResponse), ctx, correlationID, content)
}

// HandleRoleButtonPress mocks base method.
func (m *MockRoleManager) HandleRoleButtonPress(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRoleButtonPress", ctx, i)
}

// HandleRoleButtonPress indicates an expected call of HandleRoleButtonPress.
func (mr *MockRoleManagerMockRecorder) HandleRoleButtonPress(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleButtonPress", reflect.TypeOf((*MockRoleManager)(nil).HandleRoleButtonPress), ctx, i)
}

// HandleRoleCancelButton mocks base method.
func (m *MockRoleManager) HandleRoleCancelButton(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRoleCancelButton", ctx, i)
}

// HandleRoleCancelButton indicates an expected call of HandleRoleCancelButton.
func (mr *MockRoleManagerMockRecorder) HandleRoleCancelButton(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleCancelButton", reflect.TypeOf((*MockRoleManager)(nil).HandleRoleCancelButton), ctx, i)
}

// HandleRoleRequestCommand mocks base method.
func (m *MockRoleManager) HandleRoleRequestCommand(ctx context.Context, i *discordgo.InteractionCreate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRoleRequestCommand", ctx, i)
}

// HandleRoleRequestCommand indicates an expected call of HandleRoleRequestCommand.
func (mr *MockRoleManagerMockRecorder) HandleRoleRequestCommand(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleRequestCommand", reflect.TypeOf((*MockRoleManager)(nil).HandleRoleRequestCommand), ctx, i)
}

// RespondToRoleButtonPress mocks base method.
func (m *MockRoleManager) RespondToRoleButtonPress(ctx context.Context, interactionID, interactionToken, requesterID, selectedRole, targetUserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToRoleButtonPress", ctx, interactionID, interactionToken, requesterID, selectedRole, targetUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespondToRoleButtonPress indicates an expected call of RespondToRoleButtonPress.
func (mr *MockRoleManagerMockRecorder) RespondToRoleButtonPress(ctx, interactionID, interactionToken, requesterID, selectedRole, targetUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToRoleButtonPress", reflect.TypeOf((*MockRoleManager)(nil).RespondToRoleButtonPress), ctx, interactionID, interactionToken, requesterID, selectedRole, targetUserID)
}

// RespondToRoleRequest mocks base method.
func (m *MockRoleManager) RespondToRoleRequest(ctx context.Context, interactionID, interactionToken, targetUserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToRoleRequest", ctx, interactionID, interactionToken, targetUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespondToRoleRequest indicates an expected call of RespondToRoleRequest.
func (mr *MockRoleManagerMockRecorder) RespondToRoleRequest(ctx, interactionID, interactionToken, targetUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToRoleRequest", reflect.TypeOf((*MockRoleManager)(nil).RespondToRoleRequest), ctx, interactionID, interactionToken, targetUserID)
}
