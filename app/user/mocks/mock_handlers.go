// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/user/watermill/handlers/handlers.go
//
// Generated by this command:
//
//	mockgen -source=./app/user/watermill/handlers/handlers.go -destination=./app/user/mocks/mock_handlers.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
	isgomock struct{}
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// HandleAddRole mocks base method.
func (m *MockHandler) HandleAddRole(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAddRole", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleAddRole indicates an expected call of HandleAddRole.
func (mr *MockHandlerMockRecorder) HandleAddRole(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAddRole", reflect.TypeOf((*MockHandler)(nil).HandleAddRole), msg)
}

// HandleRoleAdded mocks base method.
func (m *MockHandler) HandleRoleAdded(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoleAdded", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoleAdded indicates an expected call of HandleRoleAdded.
func (mr *MockHandlerMockRecorder) HandleRoleAdded(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleAdded", reflect.TypeOf((*MockHandler)(nil).HandleRoleAdded), msg)
}

// HandleRoleAdditionFailed mocks base method.
func (m *MockHandler) HandleRoleAdditionFailed(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoleAdditionFailed", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoleAdditionFailed indicates an expected call of HandleRoleAdditionFailed.
func (mr *MockHandlerMockRecorder) HandleRoleAdditionFailed(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleAdditionFailed", reflect.TypeOf((*MockHandler)(nil).HandleRoleAdditionFailed), msg)
}

// HandleRoleUpdateButtonPress mocks base method.
func (m *MockHandler) HandleRoleUpdateButtonPress(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoleUpdateButtonPress", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoleUpdateButtonPress indicates an expected call of HandleRoleUpdateButtonPress.
func (mr *MockHandlerMockRecorder) HandleRoleUpdateButtonPress(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleUpdateButtonPress", reflect.TypeOf((*MockHandler)(nil).HandleRoleUpdateButtonPress), msg)
}

// HandleRoleUpdateCommand mocks base method.
func (m *MockHandler) HandleRoleUpdateCommand(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoleUpdateCommand", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoleUpdateCommand indicates an expected call of HandleRoleUpdateCommand.
func (mr *MockHandlerMockRecorder) HandleRoleUpdateCommand(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleUpdateCommand", reflect.TypeOf((*MockHandler)(nil).HandleRoleUpdateCommand), msg)
}

// HandleRoleUpdateResult mocks base method.
func (m *MockHandler) HandleRoleUpdateResult(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoleUpdateResult", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoleUpdateResult indicates an expected call of HandleRoleUpdateResult.
func (mr *MockHandlerMockRecorder) HandleRoleUpdateResult(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleUpdateResult", reflect.TypeOf((*MockHandler)(nil).HandleRoleUpdateResult), msg)
}

// HandleUserCreated mocks base method.
func (m *MockHandler) HandleUserCreated(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserCreated", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleUserCreated indicates an expected call of HandleUserCreated.
func (mr *MockHandlerMockRecorder) HandleUserCreated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserCreated", reflect.TypeOf((*MockHandler)(nil).HandleUserCreated), msg)
}

// HandleUserCreationFailed mocks base method.
func (m *MockHandler) HandleUserCreationFailed(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserCreationFailed", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleUserCreationFailed indicates an expected call of HandleUserCreationFailed.
func (mr *MockHandlerMockRecorder) HandleUserCreationFailed(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserCreationFailed", reflect.TypeOf((*MockHandler)(nil).HandleUserCreationFailed), msg)
}

// HandleUserSignupRequest mocks base method.
func (m *MockHandler) HandleUserSignupRequest(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserSignupRequest", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleUserSignupRequest indicates an expected call of HandleUserSignupRequest.
func (mr *MockHandlerMockRecorder) HandleUserSignupRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserSignupRequest", reflect.TypeOf((*MockHandler)(nil).HandleUserSignupRequest), msg)
}
