// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/user/watermill/handlers/handlers.go
//
// Generated by this command:
//
//	mockgen -source=./app/user/watermill/handlers/handlers.go -destination=./app/user/mocks/mock_handlers.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockUserHandler is a mock of UserHandler interface.
type MockUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlerMockRecorder
	isgomock struct{}
}

// MockUserHandlerMockRecorder is the mock recorder for MockUserHandler.
type MockUserHandlerMockRecorder struct {
	mock *MockUserHandler
}

// NewMockUserHandler creates a new mock instance.
func NewMockUserHandler(ctrl *gomock.Controller) *MockUserHandler {
	mock := &MockUserHandler{ctrl: ctrl}
	mock.recorder = &MockUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHandler) EXPECT() *MockUserHandlerMockRecorder {
	return m.recorder
}

// HandleAddRole mocks base method.
func (m *MockUserHandler) HandleAddRole(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAddRole", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleAddRole indicates an expected call of HandleAddRole.
func (mr *MockUserHandlerMockRecorder) HandleAddRole(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAddRole", reflect.TypeOf((*MockUserHandler)(nil).HandleAddRole), msg)
}

// HandleRoleAdded mocks base method.
func (m *MockUserHandler) HandleRoleAdded(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoleAdded", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoleAdded indicates an expected call of HandleRoleAdded.
func (mr *MockUserHandlerMockRecorder) HandleRoleAdded(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleAdded", reflect.TypeOf((*MockUserHandler)(nil).HandleRoleAdded), msg)
}

// HandleRoleAdditionFailed mocks base method.
func (m *MockUserHandler) HandleRoleAdditionFailed(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoleAdditionFailed", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoleAdditionFailed indicates an expected call of HandleRoleAdditionFailed.
func (mr *MockUserHandlerMockRecorder) HandleRoleAdditionFailed(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleAdditionFailed", reflect.TypeOf((*MockUserHandler)(nil).HandleRoleAdditionFailed), msg)
}

// HandleRoleUpdateButtonPress mocks base method.
func (m *MockUserHandler) HandleRoleUpdateButtonPress(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoleUpdateButtonPress", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoleUpdateButtonPress indicates an expected call of HandleRoleUpdateButtonPress.
func (mr *MockUserHandlerMockRecorder) HandleRoleUpdateButtonPress(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleUpdateButtonPress", reflect.TypeOf((*MockUserHandler)(nil).HandleRoleUpdateButtonPress), msg)
}

// HandleRoleUpdateCommand mocks base method.
func (m *MockUserHandler) HandleRoleUpdateCommand(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoleUpdateCommand", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoleUpdateCommand indicates an expected call of HandleRoleUpdateCommand.
func (mr *MockUserHandlerMockRecorder) HandleRoleUpdateCommand(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleUpdateCommand", reflect.TypeOf((*MockUserHandler)(nil).HandleRoleUpdateCommand), msg)
}

// HandleRoleUpdateResult mocks base method.
func (m *MockUserHandler) HandleRoleUpdateResult(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoleUpdateResult", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoleUpdateResult indicates an expected call of HandleRoleUpdateResult.
func (mr *MockUserHandlerMockRecorder) HandleRoleUpdateResult(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoleUpdateResult", reflect.TypeOf((*MockUserHandler)(nil).HandleRoleUpdateResult), msg)
}

// HandleUserCreated mocks base method.
func (m *MockUserHandler) HandleUserCreated(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserCreated", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleUserCreated indicates an expected call of HandleUserCreated.
func (mr *MockUserHandlerMockRecorder) HandleUserCreated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserCreated", reflect.TypeOf((*MockUserHandler)(nil).HandleUserCreated), msg)
}

// HandleUserCreationFailed mocks base method.
func (m *MockUserHandler) HandleUserCreationFailed(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserCreationFailed", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleUserCreationFailed indicates an expected call of HandleUserCreationFailed.
func (mr *MockUserHandlerMockRecorder) HandleUserCreationFailed(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserCreationFailed", reflect.TypeOf((*MockUserHandler)(nil).HandleUserCreationFailed), msg)
}

// HandleUserSignupRequest mocks base method.
func (m *MockUserHandler) HandleUserSignupRequest(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserSignupRequest", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleUserSignupRequest indicates an expected call of HandleUserSignupRequest.
func (mr *MockUserHandlerMockRecorder) HandleUserSignupRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserSignupRequest", reflect.TypeOf((*MockUserHandler)(nil).HandleUserSignupRequest), msg)
}
